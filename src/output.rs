#[prelude_import]
use ::std::prelude::rust_2015::*;
#[macro_use]
extern crate std;
use itertools::Itertools;
use std::collections::HashMap;

#[allow(unused_imports)]
use std::{};
#[allow(unused_imports)]
use std::env;
#[allow(unused_imports)]
use std::fs;

mod day_1 {






































    struct DayOneSolution {
        max_calories: usize,
        top_three_elfs: usize,
    }
    fn parse_input<'_, '_>(input: &'_ Vec<&'_ str>)
        ->
            Vec<usize> {
            let mut count = Vec<usize>::new();
            let mut temp_sum = 0usize;
            {
                    let _t =
                        match #[lang = "into_iter"](input) {
                                mut iter =>
                                    loop {
                                            match #[lang = "next"](&mut iter) {
                                                    #[lang = "None"] {} => break,
                                                    #[lang = "Some"] {  0: i } => {
                                                        if *i == ""
                                                                {
                                                                        count.push(temp_sum);
                                                                        temp_sum = 0;
                                                                    } else { temp_sum += i.parse::<usize>().unwrap(); }
                                                            } }
                                                }, }; _t };
                    count
                }
            fn max_calories<'_, '_>(input: &'_ Vec<&'_ str>)
                ->
                    usize {
                    let vec = self::parse_input(input);
                    *vec.iter().max().unwrap()
                }
            fn max_three_calories<'_, '_>(input: &'_ mut Vec<&'_ str>)
                ->
                    usize {
                    let mut vec = self::parse_input(input);
                    vec.sort();
                    vec[#[lang = "RangeFrom"]{
                                    start: vec.len() - 3,}].iter().sum()
                }
            fn solution<'_>(mut input: Vec<&'_ str>)
                ->
                    DayOneSolution {
                    let max_calories = max_calories(&input);
                    let top_three_elfs = max_three_calories(&mut input);
                    DayOneSolution{ max_calories,  top_three_elfs,}
                }
        }
        mod day_10 {
            enum Instruction { NOOP, ADDX(isize), }
            #[automatically_derived]
            impl ::core::fmt::Debug for Instruction {
                fn fmt<'_, '_,
                    '_>(self: &'_ Self, f: &'_ mut ::core::fmt::Formatter<>)
                    ->
                        ::core::fmt::Result {
                        match self {
                                Instruction::NOOP =>
                                    ::core::fmt::Formatter::write_str(f, "NOOP"),
                                Instruction::ADDX(__self_0) =>
                                    ::core::fmt::Formatter::debug_tuple_field1_finish(f, "ADDX",
                                        &__self_0),
                            }
                    }
            }
            const SHOULD_PRINT: bool = true;
            struct CrtController {
                pixel_width: usize,
            }
            impl CrtController {
                fn new(pixel_width: usize) -> Self { Self{ pixel_width,} }
                fn draw<'_>(self: &'_ Self, cycle: usize,
                    reg:
                        isize) {
                        let on_sprite =
                            ((cycle - 1) % self.pixel_width) as isize >= reg - 1 &&
                                ((cycle - 1) % self.pixel_width) as isize <= reg + 1;
                        if SHOULD_PRINT
                                {
                                        {
                                                ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&[""],
                                                        &[<#[lang = "format_argument"]>::new_display(&if on_sprite
                                                                                    { "X" } else { "." })])); };
                                            }
                                    if cycle % self.pixel_width == 0
                                            {
                                                    {
                                                            ::std::io::_print(<#[lang = "format_arguments"]>::new_const(&["\n"]));
                                                        };
                                                }
                                        } }
                                struct Machine {
                                    cycle: usize,
                                    reg: isize,
                                    collector: CycleSignalCollector,
                                    crt_controller: CrtController,
                                }
                                impl Machine {
                                    fn new(collector: CycleSignalCollector,
                                        crt_controller: CrtController)
                                        ->
                                            Self {
                                            Self{
                                                cycle: 0usize,

                                                reg: 1isize,

                                                collector,

                                                crt_controller,}
                                        }
                                    fn advance<'_>(self: &'_ mut Self,
                                        value:
                                            Option<isize>) {
                                            self.cycle += 1;
                                            self.collector.try_collect(self.cycle, self.reg);
                                            self.crt_controller.draw(self.cycle, self.reg);
                                            if let Some(v) = value { self.reg += v } }
                                            fn simulate_instruction<'_>(self: &'_ mut Self,
                                                ins:
                                                    Instruction) {
                                                    match ins {
                                                            Instruction::NOOP => { self.advance(None); }
                                                            Instruction::ADDX(value) => {
                                                                self.advance(None);
                                                                self.advance(Some(value));
                                                            }
                                                        }
                                                }
                                        }
                                        impl <'_> From<&'_ str> for Instruction {
                                            fn from<'_>(value: &'_ str)
                                                ->
                                                    Self {
                                                    let s: Vec<&str> = value.split(' ').collect();
                                                    match s[0] {
                                                            "noop" => Instruction::NOOP,
                                                            "addx" => Instruction::ADDX(s[1].parse::<isize>().unwrap()),
                                                            _ => {
                                                                ::std::rt::begin_panic("Only noop and addx supported");
                                                            }
                                                        }
                                                }
                                        }
                                        struct CycleSignalCollector {
                                            collect_at_cycle: Vec<usize>,
                                            store: isize,
                                        }
                                        impl CycleSignalCollector {
                                            fn new(collect_at_cycle: Vec<usize>)
                                                -> Self { Self{ collect_at_cycle,  store: 0,} }
                                            fn try_collect<'_>(self: &'_ mut Self, cycle: usize,
                                                reg: isize)
                                                ->
                                                    () {
                                                    {
                                                            let _t =
                                                                match #[lang = "into_iter"](&self.collect_at_cycle) {
                                                                        mut iter =>
                                                                            loop {
                                                                                    match #[lang = "next"](&mut iter) {
                                                                                            #[lang = "None"] {} => break,
                                                                                            #[lang = "Some"] {  0: &c } => {
                                                                                                if c == cycle { self.store += reg * c as isize; } } }
                                                                                        }, }; _t }
                                                        }
                                                }
                                                fn solution(input: String)
                                                    ->
                                                        isize {
                                                        let instructions = input.split('\n').map(Instruction::from);
                                                        let collector =
                                                            CycleSignalCollector::new(<[_]>::into_vec(
                                                                    #[rustc_box]
                                                                    ::alloc::boxed::Box::new([20, 60, 100, 140, 180, 220])));
                                                        let crt_contoller = CrtController::new(40);
                                                        let mut machine = Machine::new(collector, crt_contoller);
                                                        {
                                                                let _t =
                                                                    match #[lang = "into_iter"](instructions) {
                                                                            mut iter =>
                                                                                loop {
                                                                                        match #[lang = "next"](&mut iter) {
                                                                                                #[lang = "None"] {} => break,
                                                                                                #[lang = "Some"] {  0: ins } => {
                                                                                                    machine.simulate_instruction(ins)
                                                                                                }
                                                                                            }
                                                                                    },
                                                                        };
                                                                _t
                                                            };
                                                        machine.collector.store
                                                    } }
                                            mod day_11 {
                                                use itertools::Itertools;
                                                use std::collections::{};
                                                use std::collections::HashMap;
                                                use std::collections::VecDeque;
                                                struct Monkey<'a> {
                                                    id: usize,
                                                    items: VecDeque<usize>,
                                                    operation_type: char,
                                                    operation_value: &'a str,
                                                    test_value: usize,
                                                    throw_to: [usize; 2],
                                                    inspected_items: usize,
                                                }
                                                #[automatically_derived]
                                                impl <'a> ::core::fmt::Debug for Monkey<'a> {
                                                    fn fmt<'_, '_,
                                                        '_>(self: &'_ Self, f: &'_ mut ::core::fmt::Formatter<>)
                                                        ->
                                                            ::core::fmt::Result {
                                                            let names: &'static _ =
                                                                &["id", "items", "operation_type", "operation_value",
                                                                            "test_value", "throw_to", "inspected_items"];
                                                            let values: &[&dyn ::core::fmt::Debug] =
                                                                &[&self.id, &self.items, &self.operation_type,
                                                                            &self.operation_value, &self.test_value, &self.throw_to,
                                                                            &&self.inspected_items];
                                                            ::core::fmt::Formatter::debug_struct_fields_finish(f,
                                                                "Monkey", names, values)
                                                        }
                                                }
                                                #[automatically_derived]
                                                impl <'a> ::core::marker::StructuralEq for Monkey<'a> { }
                                                #[automatically_derived]
                                                impl <'a> ::core::cmp::Eq for Monkey<'a> {
                                                    #[inline]
                                                    #[doc(hidden)]
                                                    #[no_coverage]
                                                    fn assert_receiver_is_total_eq<'_>(self: &'_ Self)
                                                        ->
                                                            () {
                                                            let _: ::core::cmp::AssertParamIsEq<usize>;
                                                            let _: ::core::cmp::AssertParamIsEq<VecDeque<usize>>;
                                                            let _: ::core::cmp::AssertParamIsEq<char>;
                                                            let _: ::core::cmp::AssertParamIsEq<&'a str>;
                                                            let _: ::core::cmp::AssertParamIsEq<[usize; 2]>;
                                                        }
                                                }
                                                #[automatically_derived]
                                                impl <'a> ::core::clone::Clone for Monkey<'a> {
                                                    #[inline]
                                                    fn clone<'_>(self: &'_ Self)
                                                        ->
                                                            Monkey<'a> {
                                                            Monkey{
                                                                id: ::core::clone::Clone::clone(&self.id),

                                                                items: ::core::clone::Clone::clone(&self.items),

                                                                operation_type:
                                                                    ::core::clone::Clone::clone(&self.operation_type),

                                                                operation_value:
                                                                    ::core::clone::Clone::clone(&self.operation_value),

                                                                test_value: ::core::clone::Clone::clone(&self.test_value),

                                                                throw_to: ::core::clone::Clone::clone(&self.throw_to),

                                                                inspected_items:
                                                                    ::core::clone::Clone::clone(&self.inspected_items),}
                                                        }
                                                }
                                                impl <'a> PartialEq for Monkey<'a> {
                                                    fn eq<'_, '_>(self: &'_ Self, other: &'_ Self)
                                                        -> bool { self.id == other.id }
                                                }
                                                impl <'a> PartialOrd for Monkey<'a> {
                                                    fn partial_cmp<'_, '_>(self: &'_ Self, other: &'_ Self)
                                                        -> Option<std::cmp::Ordering> { Some(self.cmp(&other)) }
                                                }
                                                impl <'a> Ord for Monkey<'a> {
                                                    fn cmp<'_, '_>(self: &'_ Self, other: &'_ Self)
                                                        -> std::cmp::Ordering { self.id.cmp(&other.id) }
                                                }
                                                fn perform_op<'_>(old: usize, operand: char, value: &'_ str)
                                                    ->
                                                        usize {
                                                        let value =
                                                            match value {
                                                                    "old" => old,
                                                                    x => x.parse::<usize>().unwrap(),
                                                                };
                                                        match operand {
                                                                '*' => old * value,
                                                                '+' => old + value,
                                                                _ => {
                                                                    ::std::rt::begin_panic("Only {{*, +\\}} are permitted");
                                                                }
                                                            }
                                                    }
                                                fn solution(input: String)
                                                    ->
                                                        usize {
                                                        let monkeys = input.split("\n\n").collect::<Vec<&str>>();
                                                        let mut monkey_map: HashMap<usize, Monkey> = HashMap::new();
                                                        {
                                                                let _t =
                                                                    match #[lang = "into_iter"](monkeys.iter().enumerate()) {
                                                                            mut iter =>
                                                                                loop {
                                                                                        match #[lang = "next"](&mut iter) {
                                                                                                #[lang = "None"] {} => break,
                                                                                                #[lang = "Some"] {  0: (idx, &monkey) } => {
                                                                                                    let monkey_parts =
                                                                                                        monkey.split("\n").collect::<Vec<&str>>();
                                                                                                    let _id = idx;
                                                                                                    let items: VecDeque<usize> =
                                                                                                        monkey_parts[1].split(": ").collect::<Vec<&str>>()[1].split(", ").collect::<Vec<&str>>().iter().map(|&x|
                                                                                                                    x.parse::<usize>().unwrap()).collect();
                                                                                                    let operation_members =
                                                                                                        monkey_parts[2].split("= ").collect::<Vec<&str>>()[1].split(" ").collect::<Vec<&str>>();
                                                                                                    let test_value =
                                                                                                        monkey_parts[3].split("by ").collect::<Vec<&str>>()[1].parse::<usize>().unwrap();
                                                                                                    let if_test_passed =
                                                                                                        monkey_parts[4].split("monkey ").collect::<Vec<&str>>()[1].parse::<usize>().unwrap();
                                                                                                    let if_test_failed =
                                                                                                        monkey_parts[5].split("monkey ").collect::<Vec<&str>>()[1].parse::<usize>().unwrap();
                                                                                                    let throw_to = [if_test_passed, if_test_failed];
                                                                                                    monkey_map.insert(idx,
                                                                                                        Monkey{
                                                                                                            id: idx,

                                                                                                            items,

                                                                                                            operation_type:
                                                                                                                operation_members[1].chars().nth(0).unwrap(),

                                                                                                            operation_value: operation_members[2],

                                                                                                            test_value,

                                                                                                            throw_to,

                                                                                                            inspected_items: 0,});
                                                                                                }
                                                                                            }
                                                                                    },
                                                                        };
                                                                _t
                                                            };
                                                        let divisor_product: usize =
                                                            monkey_map.values().map(|x| x.test_value).product();
                                                        {
                                                                let _t =
                                                                    match #[lang = "into_iter"](#[lang = "Range"]{
                                                                                        start: 0,

                                                                                        end: 10000,}) {
                                                                            mut iter =>
                                                                                loop {
                                                                                        match #[lang = "next"](&mut iter) {
                                                                                                #[lang = "None"] {} => break,
                                                                                                #[lang = "Some"] {  0: _ } => {
                                                                                                    {
                                                                                                            let _t =
                                                                                                                match #[lang = "into_iter"](#[lang = "Range"]{
                                                                                                                                    start: 0,

                                                                                                                                    end: monkey_map.len(),}) {
                                                                                                                        mut iter =>
                                                                                                                            loop {
                                                                                                                                    match #[lang = "next"](&mut iter) {
                                                                                                                                            #[lang = "None"] {} => break,
                                                                                                                                            #[lang = "Some"] {  0: i } => {
                                                                                                                                                let mc;
                                                                                                                                                {
                                                                                                                                                        let monkey = monkey_map.get_mut(&i).unwrap();
                                                                                                                                                        mc = monkey.clone();
                                                                                                                                                        monkey.inspected_items += monkey.items.len();
                                                                                                                                                    }
                                                                                                                                                {
                                                                                                                                                        let _t =
                                                                                                                                                            match #[lang = "into_iter"](mc.items.iter().copied()) {
                                                                                                                                                                    mut iter =>
                                                                                                                                                                        loop {
                                                                                                                                                                                match #[lang = "next"](&mut iter) {
                                                                                                                                                                                        #[lang = "None"] {} => break,
                                                                                                                                                                                        #[lang = "Some"] {  0: mut item } => {
                                                                                                                                                                                            item %= divisor_product;
                                                                                                                                                                                            item =
                                                                                                                                                                                                perform_op(item, mc.operation_type, mc.operation_value);
                                                                                                                                                                                            if item % mc.test_value == 0
                                                                                                                                                                                                    {
                                                                                                                                                                                                            monkey_map.get_mut(&mc.throw_to[0]).unwrap().items.push_back(item);
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                       monkey_map.get_mut(&mc.throw_to[1]).unwrap().items.push_back(item);
                                                                                                                                                                                                   }
                                                                                                                                                                                                } }
                                                                                                                                                                                    }, }; _t };
                                                                                                                                                        monkey_map.get_mut(&i).unwrap().items.clear()
                                                                                                                                                    } }
                                                                                                                                        }, }; _t }
                                                                                                        } }
                                                                                            }, }; _t };
                                                                monkey_map.values().map(|monkey|
                                                                                    monkey.inspected_items).sorted_by(|&a, &b|
                                                                                b.cmp(&a)).take(2).product::<usize>()
                                                            }
                                                    }
                                                    mod day_12 {
                                                        #![allow(dead_code)]
                                                        use core::fmt;
                                                        use std::collections::{};
                                                        use std::collections::HashMap;
                                                        use std::collections::HashSet;
                                                        static mut START: (usize, usize) = (0, 0);
                                                        static mut DEST: (usize, usize) = (0, 0);
                                                        static mut STATES_REACHED: usize = 0;
                                                        enum Cell { Start, End, Square(u8), }
                                                        #[automatically_derived]
                                                        impl ::core::clone::Clone for Cell {
                                                            #[inline]
                                                            fn clone<'_>(self: &'_ Self)
                                                                ->
                                                                    Cell { let _: ::core::clone::AssertParamIsClone<u8>; *self }
                                                        }
                                                        #[automatically_derived]
                                                        impl ::core::marker::Copy for Cell { }
                                                        impl Cell {
                                                            fn elevation(self: Self)
                                                                ->
                                                                    u8 {
                                                                    match self {
                                                                            Cell::Start => 0,
                                                                            Cell::End => 25,
                                                                            Cell::Square(e) => e,
                                                                        }
                                                                }
                                                        }
                                                        struct CellRecord {
                                                            prev: Option<GridCoord>,
                                                        }
                                                        struct Grid {
                                                            width: usize,
                                                            height: usize,
                                                            cells: Vec<Cell>,
                                                            visited: HashMap<GridCoord, CellRecord>,
                                                            current: HashSet<GridCoord>,
                                                            num_steps: usize,
                                                            start: GridCoord,
                                                            end: GridCoord,
                                                        }
                                                        impl Grid {
                                                            fn parse<'_>(input: &'_ str)
                                                                ->
                                                                    Self {
                                                                    let first_line = input.lines().next().unwrap();
                                                                    let width = first_line.len();
                                                                    let height = input.lines().count();
                                                                    let mut cells = ::alloc::vec::Vec::new();
                                                                    let mut start = GridCoord{ x: 0,  y: 0,};
                                                                    let mut end = GridCoord{ x: 0,  y: 0,};
                                                                    input.lines().enumerate().for_each(|(line_idx, line)|
                                                                            {
                                                                                    line.chars().enumerate().for_each(|(ch_idx, ch)|
                                                                                            {
                                                                                                    let cell =
                                                                                                        match ch {
                                                                                                                'S' => { start.x = ch_idx; start.y = line_idx; Cell::Start }
                                                                                                                'E' => { end.x = ch_idx; end.y = line_idx; Cell::End }
                                                                                                                'a'...'z' => Cell::Square(ch as u8 - b'a'),
                                                                                                                _ => { ::std::rt::begin_panic("invalid character: {ch}"); }
                                                                                                            };
                                                                                                    cells.push(cell);
                                                                                                })
                                                                                });
                                                                    Self{
                                                                        width,

                                                                        height,

                                                                        cells,

                                                                        current: Default::default(),

                                                                        visited: Default::default(),

                                                                        num_steps: 0,

                                                                        start,

                                                                        end,}
                                                                }
                                                            fn in_bounds<'_>(self: &'_ Self, coord: GridCoord)
                                                                -> bool { coord.x < self.width && coord.y < self.height }
                                                            fn cell<'_>(self: &'_ Self, coord: GridCoord)
                                                                ->
                                                                    Option<&'_ Cell> {
                                                                    if !self.in_bounds(coord) { return None; }
                                                                            Some(&self.cells[coord.y * self.width + coord.x])
                                                                        }
                                                                    fn cell_mut<'_>(self: &'_ mut Self, coord: GridCoord)
                                                                        ->
                                                                            Option<&'_ mut Cell> {
                                                                            if !self.in_bounds(coord) { return None; }
                                                                                    Some(&mut self.cells[coord.y * self.width + coord.x])
                                                                                }
                                                                            fn walkable_neighbors<'_>(self: &'_ Self, coord: GridCoord)
                                                                                ->
                                                                                    /*impl Trait*/ {
                                                                                    let curr_elev = self.cell(coord).unwrap().elevation();
                                                                                    let deltas: [(isize, isize); 4] =
                                                                                        [(-1, 0), (1, 0), (0, -1), (0, 1)];
                                                                                    deltas.into_iter().filter_map(move |(dx, dy)|
                                                                                            {
                                                                                                    Some(GridCoord{
                                                                                                                x:
                                                                                                                    match #[lang = "branch"](coord.x.checked_add_signed(dx)) {
                                                                                                                            #[lang = "Break"] {  0: residual } =>
                                                                                                                                #[allow(unreachable_code)]
                                                                                                                                return #[lang = "from_residual"](residual),
                                                                                                                            #[lang = "Continue"] {  0: val } =>
                                                                                                                                #[allow(unreachable_code)]
                                                                                                                                val,
                                                                                                                        },

                                                                                                                y:
                                                                                                                    match #[lang = "branch"](coord.y.checked_add_signed(dy)) {
                                                                                                                            #[lang = "Break"] {  0: residual } =>
                                                                                                                                #[allow(unreachable_code)]
                                                                                                                                return #[lang = "from_residual"](residual),
                                                                                                                            #[lang = "Continue"] {  0: val } =>
                                                                                                                                #[allow(unreachable_code)]
                                                                                                                                val,
                                                                                                                        },}).filter(|&coord|
                                                                                                            {
                                                                                                                    self.in_bounds(coord) &&
                                                                                                                        self.cell(coord).unwrap().elevation() <= curr_elev + 1
                                                                                                                })
                                                                                                })
                                                                                }
                                                                            fn backwards_walkable_neighbors<'_>(self: &'_ Self,
                                                                                coord: GridCoord)
                                                                                ->
                                                                                    /*impl Trait*/ {
                                                                                    let curr_elev = self.cell(coord).unwrap().elevation();
                                                                                    let deltas: [(isize, isize); 4] =
                                                                                        [(-1, 0), (1, 0), (0, -1), (0, 1)];
                                                                                    deltas.into_iter().filter_map(move |(dx, dy)|
                                                                                            {
                                                                                                    Some(GridCoord{
                                                                                                                x:
                                                                                                                    match #[lang = "branch"](coord.x.checked_add_signed(dx)) {
                                                                                                                            #[lang = "Break"] {  0: residual } =>
                                                                                                                                #[allow(unreachable_code)]
                                                                                                                                return #[lang = "from_residual"](residual),
                                                                                                                            #[lang = "Continue"] {  0: val } =>
                                                                                                                                #[allow(unreachable_code)]
                                                                                                                                val,
                                                                                                                        },

                                                                                                                y:
                                                                                                                    match #[lang = "branch"](coord.y.checked_add_signed(dy)) {
                                                                                                                            #[lang = "Break"] {  0: residual } =>
                                                                                                                                #[allow(unreachable_code)]
                                                                                                                                return #[lang = "from_residual"](residual),
                                                                                                                            #[lang = "Continue"] {  0: val } =>
                                                                                                                                #[allow(unreachable_code)]
                                                                                                                                val,
                                                                                                                        },}).filter(|&coord|
                                                                                                            {
                                                                                                                    self.in_bounds(coord) &&
                                                                                                                        self.cell(coord).unwrap().elevation() + 1 >= curr_elev
                                                                                                                })
                                                                                                })
                                                                                }
                                                                            fn solve_1<'_>(self: &'_ mut Self)
                                                                                ->
                                                                                    usize {
                                                                                    if self.current.is_empty()
                                                                                            {
                                                                                                    let mut start_coord: Option<GridCoord> = None;
                                                                                                    {
                                                                                                            let _t =
                                                                                                                match #[lang = "into_iter"](#[lang = "Range"]{
                                                                                                                                    start: 0,

                                                                                                                                    end: self.height,}) {
                                                                                                                        mut iter =>
                                                                                                                            loop {
                                                                                                                                    match #[lang = "next"](&mut iter) {
                                                                                                                                            #[lang = "None"] {} => break,
                                                                                                                                            #[lang = "Some"] {  0: y } => {
                                                                                                                                                {
                                                                                                                                                        let _t =
                                                                                                                                                            match #[lang = "into_iter"](#[lang = "Range"]{
                                                                                                                                                                                start: 0,

                                                                                                                                                                                end: self.width,}) {
                                                                                                                                                                    mut iter =>
                                                                                                                                                                        loop {
                                                                                                                                                                                match #[lang = "next"](&mut iter) {
                                                                                                                                                                                        #[lang = "None"] {} => break,
                                                                                                                                                                                        #[lang = "Some"] {  0: x } => {
                                                                                                                                                                                            let coord: GridCoord = (x, y).into();
                                                                                                                                                                                            if let Cell::Start = self.cell(coord).unwrap()
                                                                                                                                                                                                    { start_coord = Some(coord); break; }
                                                                                                                                                                                                } }
                                                                                                                                                                                    }, }; _t }
                                                                                                                                                    } }
                                                                                                                                        }, }; _t };
                                                                                                            let start_coord = start_coord.unwrap();
                                                                                                            self.current.insert(start_coord);
                                                                                                            self.visited.insert(start_coord, CellRecord{ prev: None,});
                                                                                                        }
                                                                                                loop {
                                                                                                        if !self.current.is_empty()
                                                                                                                {
                                                                                                                        let current = std::mem::take(&mut self.current);
                                                                                                                        let mut next = HashSet::new();
                                                                                                                        let mut visited = std::mem::take(&mut self.visited);
                                                                                                                        {
                                                                                                                                let _t =
                                                                                                                                    match #[lang = "into_iter"](current) {
                                                                                                                                            mut iter =>
                                                                                                                                                loop {
                                                                                                                                                        match #[lang = "next"](&mut iter) {
                                                                                                                                                                #[lang = "None"] {} => break,
                                                                                                                                                                #[lang = "Some"] {  0: curr } => {
                                                                                                                                                                    {
                                                                                                                                                                            let _t =
                                                                                                                                                                                match #[lang = "into_iter"](self.walkable_neighbors(curr)) {
                                                                                                                                                                                        mut iter =>
                                                                                                                                                                                            loop {
                                                                                                                                                                                                    match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                            #[lang = "None"] {} => break,
                                                                                                                                                                                                            #[lang = "Some"] {  0: ncoord } => {
                                                                                                                                                                                                                if visited.contains_key(&ncoord) { continue; }
                                                                                                                                                                                                                        if self.end == ncoord
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["",
                                                                                                                                                                                                                                                                    " ", "\n"],
                                                                                                                                                                                                                                                        &[<#[lang = "format_argument"]>::new_debug(&self.end),
                                                                                                                                                                                                                                                                    <#[lang = "format_argument"]>::new_debug(&ncoord)]));
                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                        return self.num_steps + 1;
                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                visited.insert(ncoord, CellRecord{ prev: Some(curr),});
                                                                                                                                                                                                                                next.insert(ncoord);
                                                                                                                                                                                                                            } } }, };
                                                                                                                                                                                            _t
                                                                                                                                                                                        } } } }, };
                                                                                                                                                _t
                                                                                                                                            }; self.current = next; self.visited = visited;
                                                                                                                                        self.num_steps += 1; } else { break; } } self.num_steps }
                                                                                                                fn solve_2<'_>(self: &'_ mut Self)
                                                                                                                    ->
                                                                                                                        usize {
                                                                                                                        if self.current.is_empty()
                                                                                                                                {
                                                                                                                                        let mut start_coord: Option<GridCoord> = None;
                                                                                                                                        {
                                                                                                                                                let _t =
                                                                                                                                                    match #[lang = "into_iter"](#[lang = "Range"]{
                                                                                                                                                                        start: 0,

                                                                                                                                                                        end: self.height,}) {
                                                                                                                                                            mut iter =>
                                                                                                                                                                loop {
                                                                                                                                                                        match #[lang = "next"](&mut iter) {
                                                                                                                                                                                #[lang = "None"] {} => break,
                                                                                                                                                                                #[lang = "Some"] {  0: y } => {
                                                                                                                                                                                    {
                                                                                                                                                                                            let _t =
                                                                                                                                                                                                match #[lang = "into_iter"](#[lang = "Range"]{
                                                                                                                                                                                                                    start: 0,

                                                                                                                                                                                                                    end: self.width,}) {
                                                                                                                                                                                                        mut iter =>
                                                                                                                                                                                                            loop {
                                                                                                                                                                                                                    match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                            #[lang = "None"] {} => break,
                                                                                                                                                                                                                            #[lang = "Some"] {  0: x } => {
                                                                                                                                                                                                                                let coord: GridCoord = (x, y).into();
                                                                                                                                                                                                                                if let Cell::End = self.cell(coord).unwrap()
                                                                                                                                                                                                                                        { start_coord = Some(coord); break; }
                                                                                                                                                                                                                                    } }
                                                                                                                                                                                                                        }, }; _t }
                                                                                                                                                                                        } }
                                                                                                                                                                            }, }; _t };
                                                                                                                                                let start_coord = start_coord.unwrap();
                                                                                                                                                self.current.insert(start_coord);
                                                                                                                                                self.visited.insert(start_coord, CellRecord{ prev: None,});
                                                                                                                                            }
                                                                                                                                    loop {
                                                                                                                                            if !self.current.is_empty()
                                                                                                                                                    {
                                                                                                                                                            let current = std::mem::take(&mut self.current);
                                                                                                                                                            let mut next = HashSet::new();
                                                                                                                                                            let mut visited = std::mem::take(&mut self.visited);
                                                                                                                                                            {
                                                                                                                                                                    let _t =
                                                                                                                                                                        match #[lang = "into_iter"](current) {
                                                                                                                                                                                mut iter =>
                                                                                                                                                                                    loop {
                                                                                                                                                                                            match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                    #[lang = "None"] {} => break,
                                                                                                                                                                                                    #[lang = "Some"] {  0: curr } => {
                                                                                                                                                                                                        {
                                                                                                                                                                                                                let _t =
                                                                                                                                                                                                                    match #[lang = "into_iter"](self.backwards_walkable_neighbors(curr))
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                            mut iter =>
                                                                                                                                                                                                                                loop {
                                                                                                                                                                                                                                        match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                #[lang = "Some"] {  0: ncoord } => {
                                                                                                                                                                                                                                                    if visited.contains_key(&ncoord) { continue; }
                                                                                                                                                                                                                                                            if let Some(c) = self.cell(ncoord)
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                            match c {
                                                                                                                                                                                                                                                                                    Cell::Square(x) => {
                                                                                                                                                                                                                                                                                        if *x == 0 { return self.num_steps + 1; } } _ => { } }
                                                                                                                                                                                                                                                                                } visited.insert(ncoord, CellRecord{ prev: Some(curr),});
                                                                                                                                                                                                                                                                        next.insert(ncoord); } } },
                                                                                                                                                                                                                                                };
                                                                                                                                                                                                                                        _t
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        } },
                                                                                                                                                                                                    };
                                                                                                                                                                                            _t
                                                                                                                                                                                        };
                                                                                                                                                                                    self.current = next;
                                                                                                                                                                                    self.visited = visited;
                                                                                                                                                                                    self.num_steps += 1;
                                                                                                                                                                                } else { break; } } self.num_steps } }
                                                                                                                                                    impl fmt::Debug for Grid {
                                                                                                                                                        fn fmt<'_, '_,
                                                                                                                                                            '_>(self: &'_ Self, f: &'_ mut fmt::Formatter<'_>)
                                                                                                                                                            ->
                                                                                                                                                                fmt::Result {
                                                                                                                                                                match #[lang = "branch"](f.write_fmt(<#[lang = "format_arguments"]>::new_v1(&["",
                                                                                                                                                                                                    " by ", ":\n"],
                                                                                                                                                                                        &[<#[lang = "format_argument"]>::new_display(&self.width),
                                                                                                                                                                                                    <#[lang = "format_argument"]>::new_display(&self.height)])))
                                                                                                                                                                            {
                                                                                                                                                                        #[lang = "Break"] {  0: residual } =>
                                                                                                                                                                            #[allow(unreachable_code)]
                                                                                                                                                                            return #[lang = "from_residual"](residual),
                                                                                                                                                                        #[lang = "Continue"] {  0: val } =>
                                                                                                                                                                            #[allow(unreachable_code)]
                                                                                                                                                                            val,
                                                                                                                                                                    };
                                                                                                                                                                {
                                                                                                                                                                        let _t =
                                                                                                                                                                            match #[lang = "into_iter"](#[lang = "Range"]{
                                                                                                                                                                                                start: 0,

                                                                                                                                                                                                end: self.height,}) {
                                                                                                                                                                                    mut iter =>
                                                                                                                                                                                        loop {
                                                                                                                                                                                                match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                        #[lang = "None"] {} => break,
                                                                                                                                                                                                        #[lang = "Some"] {  0: y } => {
                                                                                                                                                                                                            {
                                                                                                                                                                                                                    let _t =
                                                                                                                                                                                                                        match #[lang = "into_iter"](#[lang = "Range"]{
                                                                                                                                                                                                                                            start: 0,

                                                                                                                                                                                                                                            end: self.width,}) {
                                                                                                                                                                                                                                mut iter =>
                                                                                                                                                                                                                                    loop {
                                                                                                                                                                                                                                            match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                    #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                    #[lang = "Some"] {  0: x } => {
                                                                                                                                                                                                                                                        let cell = self.cell((x, y).into()).unwrap();
                                                                                                                                                                                                                                                        let c =
                                                                                                                                                                                                                                                            match cell {
                                                                                                                                                                                                                                                                    Cell::Start => 'S',
                                                                                                                                                                                                                                                                    Cell::End => 'E',
                                                                                                                                                                                                                                                                    Cell::Square(elevation) => (b'a' + elevation) as char,
                                                                                                                                                                                                                                                                };
                                                                                                                                                                                                                                                        match #[lang = "branch"](f.write_fmt(<#[lang = "format_arguments"]>::new_v1(&[""],
                                                                                                                                                                                                                                                                                &[<#[lang = "format_argument"]>::new_display(&c)]))) {
                                                                                                                                                                                                                                                                #[lang = "Break"] {  0: residual } =>
                                                                                                                                                                                                                                                                    #[allow(unreachable_code)]
                                                                                                                                                                                                                                                                    return #[lang = "from_residual"](residual),
                                                                                                                                                                                                                                                                #[lang = "Continue"] {  0: val } =>
                                                                                                                                                                                                                                                                    #[allow(unreachable_code)]
                                                                                                                                                                                                                                                                    val,
                                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                            };
                                                                                                                                                                                                                    _t
                                                                                                                                                                                                                };
                                                                                                                                                                                                            match #[lang = "branch"](f.write_fmt(<#[lang = "format_arguments"]>::new_const(&["\n"])))
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                    #[lang = "Break"] {  0: residual } =>
                                                                                                                                                                                                                        #[allow(unreachable_code)]
                                                                                                                                                                                                                        return #[lang = "from_residual"](residual),
                                                                                                                                                                                                                    #[lang = "Continue"] {  0: val } =>
                                                                                                                                                                                                                        #[allow(unreachable_code)]
                                                                                                                                                                                                                        val,
                                                                                                                                                                                                                };
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                            },
                                                                                                                                                                                };
                                                                                                                                                                        _t
                                                                                                                                                                    };
                                                                                                                                                                Ok(())
                                                                                                                                                            }
                                                                                                                                                    }
                                                                                                                                                    struct GridCoord {
                                                                                                                                                        x: usize,
                                                                                                                                                        y: usize,
                                                                                                                                                    }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::clone::Clone for GridCoord {
                                                                                                                                                        #[inline]
                                                                                                                                                        fn clone<'_>(self: &'_ Self)
                                                                                                                                                            ->
                                                                                                                                                                GridCoord {
                                                                                                                                                                let _: ::core::clone::AssertParamIsClone<usize>;
                                                                                                                                                                *self
                                                                                                                                                            }
                                                                                                                                                    }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::marker::Copy for GridCoord { }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::fmt::Debug for GridCoord {
                                                                                                                                                        fn fmt<'_, '_,
                                                                                                                                                            '_>(self: &'_ Self, f: &'_ mut ::core::fmt::Formatter<>)
                                                                                                                                                            ->
                                                                                                                                                                ::core::fmt::Result {
                                                                                                                                                                ::core::fmt::Formatter::debug_struct_field2_finish(f,
                                                                                                                                                                    "GridCoord", "x", &self.x, "y", &&self.y)
                                                                                                                                                            }
                                                                                                                                                    }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::marker::StructuralPartialEq for GridCoord { }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::cmp::PartialEq for GridCoord {
                                                                                                                                                        #[inline]
                                                                                                                                                        fn eq<'_, '_>(self: &'_ Self, other: &'_ GridCoord)
                                                                                                                                                            -> bool { self.x == other.x && self.y == other.y }
                                                                                                                                                    }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::marker::StructuralEq for GridCoord { }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::cmp::Eq for GridCoord {
                                                                                                                                                        #[inline]
                                                                                                                                                        #[doc(hidden)]
                                                                                                                                                        #[no_coverage]
                                                                                                                                                        fn assert_receiver_is_total_eq<'_>(self: &'_ Self)
                                                                                                                                                            -> () { let _: ::core::cmp::AssertParamIsEq<usize>; }
                                                                                                                                                    }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::hash::Hash for GridCoord {
                                                                                                                                                        #[inline]
                                                                                                                                                        fn hash<__H, '_, '_>(self: &'_ Self, state: &'_ mut __H)
                                                                                                                                                            -> () where
                                                                                                                                                            __H: ::core::hash::Hasher {
                                                                                                                                                                ::core::hash::Hash::hash(&self.x, state);
                                                                                                                                                                ::core::hash::Hash::hash(&self.y, state)
                                                                                                                                                            }
                                                                                                                                                    }
                                                                                                                                                    impl From<(usize, usize)> for GridCoord {
                                                                                                                                                        fn from((x, y): (usize, usize)) -> Self { Self{ x,  y,} }
                                                                                                                                                    }
                                                                                                                                                    fn solution(input: String)
                                                                                                                                                        ->
                                                                                                                                                            usize {
                                                                                                                                                            let mut grid = Grid::parse(&input);
                                                                                                                                                            {
                                                                                                                                                                    ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["",
                                                                                                                                                                                        "\n"], &[<#[lang = "format_argument"]>::new_debug(&grid)]));
                                                                                                                                                                };
                                                                                                                                                            let r = grid.solve_2();
                                                                                                                                                            r
                                                                                                                                                        }
                                                                                                                                                    enum STATE { STUCK, FINISHED(usize), }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::fmt::Debug for STATE {
                                                                                                                                                        fn fmt<'_, '_,
                                                                                                                                                            '_>(self: &'_ Self, f: &'_ mut ::core::fmt::Formatter<>)
                                                                                                                                                            ->
                                                                                                                                                                ::core::fmt::Result {
                                                                                                                                                                match self {
                                                                                                                                                                        STATE::STUCK =>
                                                                                                                                                                            ::core::fmt::Formatter::write_str(f, "STUCK"),
                                                                                                                                                                        STATE::FINISHED(__self_0) =>
                                                                                                                                                                            ::core::fmt::Formatter::debug_tuple_field1_finish(f,
                                                                                                                                                                                "FINISHED", &__self_0),
                                                                                                                                                                    }
                                                                                                                                                            }
                                                                                                                                                    }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::marker::StructuralPartialEq for STATE { }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::cmp::PartialEq for STATE {
                                                                                                                                                        #[inline]
                                                                                                                                                        fn eq<'_, '_>(self: &'_ Self, other: &'_ STATE)
                                                                                                                                                            ->
                                                                                                                                                                bool {
                                                                                                                                                                let __self_tag =
                                                                                                                                                                    ::core::intrinsics::discriminant_value(self);
                                                                                                                                                                let __arg1_tag =
                                                                                                                                                                    ::core::intrinsics::discriminant_value(other);
                                                                                                                                                                __self_tag == __arg1_tag &&
                                                                                                                                                                    match (self, other) {
                                                                                                                                                                            (STATE::FINISHED(__self_0), STATE::FINISHED(__arg1_0)) =>
                                                                                                                                                                                *__self_0 == *__arg1_0,
                                                                                                                                                                            _ => true,
                                                                                                                                                                        }
                                                                                                                                                            }
                                                                                                                                                    }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::cmp::PartialOrd for STATE {
                                                                                                                                                        #[inline]
                                                                                                                                                        fn partial_cmp<'_, '_>(self: &'_ Self, other: &'_ STATE)
                                                                                                                                                            ->
                                                                                                                                                                ::core::option::Option<::core::cmp::Ordering> {
                                                                                                                                                                let __self_tag =
                                                                                                                                                                    ::core::intrinsics::discriminant_value(self);
                                                                                                                                                                let __arg1_tag =
                                                                                                                                                                    ::core::intrinsics::discriminant_value(other);
                                                                                                                                                                match (self, other) {
                                                                                                                                                                        (STATE::FINISHED(__self_0), STATE::FINISHED(__arg1_0)) =>
                                                                                                                                                                            ::core::cmp::PartialOrd::partial_cmp(__self_0, __arg1_0),
                                                                                                                                                                        _ =>
                                                                                                                                                                            ::core::cmp::PartialOrd::partial_cmp(&__self_tag,
                                                                                                                                                                                &__arg1_tag),
                                                                                                                                                                    }
                                                                                                                                                            }
                                                                                                                                                    }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::marker::StructuralEq for STATE { }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::cmp::Eq for STATE {
                                                                                                                                                        #[inline]
                                                                                                                                                        #[doc(hidden)]
                                                                                                                                                        #[no_coverage]
                                                                                                                                                        fn assert_receiver_is_total_eq<'_>(self: &'_ Self)
                                                                                                                                                            -> () { let _: ::core::cmp::AssertParamIsEq<usize>; }
                                                                                                                                                    }
                                                                                                                                                    #[automatically_derived]
                                                                                                                                                    impl ::core::cmp::Ord for STATE {
                                                                                                                                                        #[inline]
                                                                                                                                                        fn cmp<'_, '_>(self: &'_ Self, other: &'_ STATE)
                                                                                                                                                            ->
                                                                                                                                                                ::core::cmp::Ordering {
                                                                                                                                                                let __self_tag =
                                                                                                                                                                    ::core::intrinsics::discriminant_value(self);
                                                                                                                                                                let __arg1_tag =
                                                                                                                                                                    ::core::intrinsics::discriminant_value(other);
                                                                                                                                                                match ::core::cmp::Ord::cmp(&__self_tag, &__arg1_tag) {
                                                                                                                                                                        ::core::cmp::Ordering::Equal =>
                                                                                                                                                                            match (self, other) {
                                                                                                                                                                                    (STATE::FINISHED(__self_0), STATE::FINISHED(__arg1_0)) =>
                                                                                                                                                                                        ::core::cmp::Ord::cmp(__self_0, __arg1_0),
                                                                                                                                                                                    _ => ::core::cmp::Ordering::Equal,
                                                                                                                                                                                },
                                                                                                                                                                        cmp => cmp,
                                                                                                                                                                    }
                                                                                                                                                            }
                                                                                                                                                    }
                                                                                                                                                    const MAX_MOVES: usize = 15;
                                                                                                                                                    fn solve_maze<'_, '_,
                                                                                                                                                        '_>(arr: &'_ [[u8; 113]; 41], current: (usize, usize),
                                                                                                                                                        previous: (usize, usize), move_number: usize,
                                                                                                                                                        current_lowest: &'_ mut usize,
                                                                                                                                                        move_map: &'_ mut HashMap<(usize, usize), usize>)
                                                                                                                                                        ->
                                                                                                                                                            STATE {
                                                                                                                                                            let mut res: Vec<STATE> = Vec::with_capacity(3);
                                                                                                                                                            let current_char = arr[current.0][current.1];
                                                                                                                                                            let v = move_map.get(&current);
                                                                                                                                                            if v.is_some()
                                                                                                                                                                    {
                                                                                                                                                                            if *v.unwrap() <= move_number { return STATE::STUCK; }
                                                                                                                                                                                } else { move_map.insert(current, move_number); }
                                                                                                                                                                        unsafe { STATES_REACHED += 1; }
                                                                                                                                                                        if move_number >= *current_lowest { return STATE::STUCK; }
                                                                                                                                                                                if current == unsafe { DEST }
                                                                                                                                                                                        { return STATE::FINISHED(move_number); }
                                                                                                                                                                                        if move_number == MAX_MOVES { return STATE::STUCK; }
                                                                                                                                                                                                if current.1 > 0
                                                                                                                                                                                                        {
                                                                                                                                                                                                                let to_left = (current.0, current.1 - 1);
                                                                                                                                                                                                                let elem = arr.get(to_left.0).unwrap().get(to_left.1);
                                                                                                                                                                                                                if elem.is_some() && to_left != previous
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                if *elem.unwrap() > current_char &&
                                                                                                                                                                                                                                            *elem.unwrap() - current_char > 1
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                res.push(STATE::STUCK);
                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                           let st =
                                                                                                                                                                                                                                               solve_maze(arr, to_left, current, move_number + 1,
                                                                                                                                                                                                                                                   current_lowest, move_map);
                                                                                                                                                                                                                                           res.push(st);
                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                    } } let to_right = (current.0, current.1 + 1);
                                                                                                                                                                                                                    let elem = arr.get(to_right.0).unwrap().get(to_right.1);
                                                                                                                                                                                                                    if elem.is_some() && to_right != previous
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                    if *elem.unwrap() > current_char &&
                                                                                                                                                                                                                                                *elem.unwrap() - current_char > 1
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                    res.push(STATE::STUCK);
                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                               let st =
                                                                                                                                                                                                                                                   solve_maze(arr, to_right, current, move_number + 1,
                                                                                                                                                                                                                                                       current_lowest, move_map);
                                                                                                                                                                                                                                               match st {
                                                                                                                                                                                                                                                       STATE::FINISHED(x) => {
                                                                                                                                                                                                                                                           if x < *current_lowest { *current_lowest = x; } } _ => { } }
                                                                                                                                                                                                                                                       res.push(st);
                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                           }
                                                                                                                                                                                                                                        if current.0 > 0
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                        let to_up = (current.0 - 1, current.1);
                                                                                                                                                                                                                                                        let elem = arr.get(to_up.0);
                                                                                                                                                                                                                                                        if elem.is_some() && to_up != previous
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                        let elem = elem.unwrap().get(to_up.1);
                                                                                                                                                                                                                                                                        if *elem.unwrap() > current_char &&
                                                                                                                                                                                                                                                                                    *elem.unwrap() - current_char > 1
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                        res.push(STATE::STUCK);
                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                   let st =
                                                                                                                                                                                                                                                                                       solve_maze(arr, to_up, current, move_number + 1,
                                                                                                                                                                                                                                                                                           current_lowest, move_map);
                                                                                                                                                                                                                                                                                   match st {
                                                                                                                                                                                                                                                                                           STATE::FINISHED(x) => {
                                                                                                                                                                                                                                                                                               if x < *current_lowest { *current_lowest = x; } } _ => { } }
                                                                                                                                                                                                                                                                                           res.push(st);
                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                               } } let to_down = (current.0 + 1, current.1);
                                                                                                                                                                                                                                                                let elem = arr.get(to_down.0);
                                                                                                                                                                                                                                                                if elem.is_some() && to_down != previous
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                let elem = elem.unwrap().get(to_down.1);
                                                                                                                                                                                                                                                                                if *elem.unwrap() > current_char &&
                                                                                                                                                                                                                                                                                            *elem.unwrap() - current_char > 1
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                res.push(STATE::STUCK);
                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                           let st =
                                                                                                                                                                                                                                                                                               solve_maze(arr, to_down, current, move_number + 1,
                                                                                                                                                                                                                                                                                                   current_lowest, move_map);
                                                                                                                                                                                                                                                                                           match st {
                                                                                                                                                                                                                                                                                                   STATE::FINISHED(x) => {
                                                                                                                                                                                                                                                                                                       if x < *current_lowest { *current_lowest = x; } } _ => { } }
                                                                                                                                                                                                                                                                                                   res.push(st);
                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                    res.into_iter().filter(|st|
                                                                                                                                                                                                                                                                                                    match st {
                                                                                                                                                                                                                                                                                                            STATE::FINISHED(_) => true,
                                                                                                                                                                                                                                                                                                            _ => false,
                                                                                                                                                                                                                                                                                                        }).min().unwrap_or(STATE::STUCK) } }
                                                                                                                                                                                                                                                                        mod day_13 {
                                                                                                                                                                                                                                                                            #![allow(dead_code)]
                                                                                                                                                                                                                                                                            use core::fmt;
                                                                                                                                                                                                                                                                            use std::cmp::Ordering;
                                                                                                                                                                                                                                                                            use serde::Deserialize;
                                                                                                                                                                                                                                                                            #[serde(untagged)]
                                                                                                                                                                                                                                                                            enum PacketValue { Single(usize), List(Vec<PacketValue>), }
                                                                                                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                                                                                                            impl ::core::clone::Clone for PacketValue {
                                                                                                                                                                                                                                                                                #[inline]
                                                                                                                                                                                                                                                                                fn clone<'_>(self: &'_ Self)
                                                                                                                                                                                                                                                                                    ->
                                                                                                                                                                                                                                                                                        PacketValue {
                                                                                                                                                                                                                                                                                        match self {
                                                                                                                                                                                                                                                                                                PacketValue::Single(__self_0) =>
                                                                                                                                                                                                                                                                                                    PacketValue::Single(::core::clone::Clone::clone(__self_0)),
                                                                                                                                                                                                                                                                                                PacketValue::List(__self_0) =>
                                                                                                                                                                                                                                                                                                    PacketValue::List(::core::clone::Clone::clone(__self_0)),
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                                                                                                            impl ::core::marker::StructuralPartialEq for PacketValue { }
                                                                                                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                                                                                                            impl ::core::cmp::PartialEq for PacketValue {
                                                                                                                                                                                                                                                                                #[inline]
                                                                                                                                                                                                                                                                                fn eq<'_, '_>(self: &'_ Self, other: &'_ PacketValue)
                                                                                                                                                                                                                                                                                    ->
                                                                                                                                                                                                                                                                                        bool {
                                                                                                                                                                                                                                                                                        let __self_tag =
                                                                                                                                                                                                                                                                                            ::core::intrinsics::discriminant_value(self);
                                                                                                                                                                                                                                                                                        let __arg1_tag =
                                                                                                                                                                                                                                                                                            ::core::intrinsics::discriminant_value(other);
                                                                                                                                                                                                                                                                                        __self_tag == __arg1_tag &&
                                                                                                                                                                                                                                                                                            match (self, other) {
                                                                                                                                                                                                                                                                                                    (PacketValue::Single(__self_0),
                                                                                                                                                                                                                                                                                                        PacketValue::Single(__arg1_0)) => *__self_0 == *__arg1_0,
                                                                                                                                                                                                                                                                                                    (PacketValue::List(__self_0), PacketValue::List(__arg1_0))
                                                                                                                                                                                                                                                                                                        => *__self_0 == *__arg1_0,
                                                                                                                                                                                                                                                                                                    _ => unsafe { ::core::intrinsics::unreachable() }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                                                                                                            impl ::core::marker::StructuralEq for PacketValue { }
                                                                                                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                                                                                                            impl ::core::cmp::Eq for PacketValue {
                                                                                                                                                                                                                                                                                #[inline]
                                                                                                                                                                                                                                                                                #[doc(hidden)]
                                                                                                                                                                                                                                                                                #[no_coverage]
                                                                                                                                                                                                                                                                                fn assert_receiver_is_total_eq<'_>(self: &'_ Self)
                                                                                                                                                                                                                                                                                    ->
                                                                                                                                                                                                                                                                                        () {
                                                                                                                                                                                                                                                                                        let _: ::core::cmp::AssertParamIsEq<usize>;
                                                                                                                                                                                                                                                                                        let _: ::core::cmp::AssertParamIsEq<Vec<PacketValue>>;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            impl fmt::Debug for PacketValue {
                                                                                                                                                                                                                                                                                fn fmt<'_, '_,
                                                                                                                                                                                                                                                                                    '_>(self: &'_ Self, f: &'_ mut fmt::Formatter<'_>)
                                                                                                                                                                                                                                                                                    ->
                                                                                                                                                                                                                                                                                        fmt::Result {
                                                                                                                                                                                                                                                                                        match self {
                                                                                                                                                                                                                                                                                                Self::Single(n) =>
                                                                                                                                                                                                                                                                                                    f.write_fmt(<#[lang = "format_arguments"]>::new_v1(&[""],
                                                                                                                                                                                                                                                                                                            &[<#[lang = "format_argument"]>::new_display(&n)])),
                                                                                                                                                                                                                                                                                                Self::List(n) => f.debug_list().entries(n).finish(),
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            impl PacketValue {
                                                                                                                                                                                                                                                                                fn get_vec<'_>(self: &'_ Self)
                                                                                                                                                                                                                                                                                    ->
                                                                                                                                                                                                                                                                                        Vec<PacketValue> {
                                                                                                                                                                                                                                                                                        match self {
                                                                                                                                                                                                                                                                                                Self::List(n) => n.clone(),
                                                                                                                                                                                                                                                                                                Self::Single(n) =>
                                                                                                                                                                                                                                                                                                    <[_]>::into_vec(
                                                                                                                                                                                                                                                                                                        #[rustc_box]
                                                                                                                                                                                                                                                                                                        ::alloc::boxed::Box::new([Self::Single(*n)])),
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            impl PartialOrd for PacketValue {
                                                                                                                                                                                                                                                                                fn partial_cmp<'_, '_>(self: &'_ Self, other: &'_ Self)
                                                                                                                                                                                                                                                                                    ->
                                                                                                                                                                                                                                                                                        Option<Ordering> {
                                                                                                                                                                                                                                                                                        match (self, other) {
                                                                                                                                                                                                                                                                                                (Self::Single(a), Self::Single(b)) => a.partial_cmp(&b),
                                                                                                                                                                                                                                                                                                (left, right) => {
                                                                                                                                                                                                                                                                                                    let l_vec = left.get_vec();
                                                                                                                                                                                                                                                                                                    let r_vec = right.get_vec();
                                                                                                                                                                                                                                                                                                    Some(l_vec.iter().zip(r_vec.iter()).map(|(a, b)|
                                                                                                                                                                                                                                                                                                                        a.cmp(b)).find(|&x|
                                                                                                                                                                                                                                                                                                                    x !=
                                                                                                                                                                                                                                                                                                                        Ordering::Equal).unwrap_or_else(||
                                                                                                                                                                                                                                                                                                                l_vec.len().cmp(&r_vec.len())))
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            impl Ord for PacketValue {
                                                                                                                                                                                                                                                                                fn cmp<'_, '_>(self: &'_ Self, other: &'_ Self)
                                                                                                                                                                                                                                                                                    -> Ordering { self.partial_cmp(other).unwrap() }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            fn solution(input: String)
                                                                                                                                                                                                                                                                                ->
                                                                                                                                                                                                                                                                                    usize {
                                                                                                                                                                                                                                                                                    let mut ans = 0usize;
                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                            let _t =
                                                                                                                                                                                                                                                                                                match #[lang = "into_iter"](input.split("\n\n").enumerate())
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                        mut iter =>
                                                                                                                                                                                                                                                                                                            loop {
                                                                                                                                                                                                                                                                                                                    match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                            #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                            #[lang = "Some"] {  0: (idx, groups) } => {
                                                                                                                                                                                                                                                                                                                                let mut packets =
                                                                                                                                                                                                                                                                                                                                    groups.lines().map(|line|
                                                                                                                                                                                                                                                                                                                                            serde_json::from_str::<PacketValue>(line).unwrap());
                                                                                                                                                                                                                                                                                                                                let left = packets.next().unwrap();
                                                                                                                                                                                                                                                                                                                                let right = packets.next().unwrap();
                                                                                                                                                                                                                                                                                                                                let is_correct = left < right;
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                        ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["Group ",
                                                                                                                                                                                                                                                                                                                                                            " L=", " R=", " is in right order ", "\n"],
                                                                                                                                                                                                                                                                                                                                                &[<#[lang = "format_argument"]>::new_display(&idx),
                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_argument"]>::new_debug(&left),
                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_argument"]>::new_debug(&right),
                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_argument"]>::new_display(&is_correct)]));
                                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                                                if is_correct { ans += idx + 1; } } }
                                                                                                                                                                                                                                                                                                                        }, }; _t };
                                                                                                                                                                                                                                                                                            ans
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                mod day_2 {
                                                                                                                                                                                                                                                                                    use std::str::FromStr;
                                                                                                                                                                                                                                                                                    enum Hand { A = 1, B = 2, C = 3, }
                                                                                                                                                                                                                                                                                    #[automatically_derived]
                                                                                                                                                                                                                                                                                    impl ::core::marker::StructuralPartialEq for Hand { }
                                                                                                                                                                                                                                                                                    #[automatically_derived]
                                                                                                                                                                                                                                                                                    impl ::core::cmp::PartialEq for Hand {
                                                                                                                                                                                                                                                                                        #[inline]
                                                                                                                                                                                                                                                                                        fn eq<'_, '_>(self: &'_ Self, other: &'_ Hand)
                                                                                                                                                                                                                                                                                            ->
                                                                                                                                                                                                                                                                                                bool {
                                                                                                                                                                                                                                                                                                let __self_tag =
                                                                                                                                                                                                                                                                                                    ::core::intrinsics::discriminant_value(self);
                                                                                                                                                                                                                                                                                                let __arg1_tag =
                                                                                                                                                                                                                                                                                                    ::core::intrinsics::discriminant_value(other);
                                                                                                                                                                                                                                                                                                __self_tag == __arg1_tag
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    #[automatically_derived]
                                                                                                                                                                                                                                                                                    impl ::core::cmp::PartialOrd for Hand {
                                                                                                                                                                                                                                                                                        #[inline]
                                                                                                                                                                                                                                                                                        fn partial_cmp<'_, '_>(self: &'_ Self, other: &'_ Hand)
                                                                                                                                                                                                                                                                                            ->
                                                                                                                                                                                                                                                                                                ::core::option::Option<::core::cmp::Ordering> {
                                                                                                                                                                                                                                                                                                let __self_tag =
                                                                                                                                                                                                                                                                                                    ::core::intrinsics::discriminant_value(self);
                                                                                                                                                                                                                                                                                                let __arg1_tag =
                                                                                                                                                                                                                                                                                                    ::core::intrinsics::discriminant_value(other);
                                                                                                                                                                                                                                                                                                ::core::cmp::PartialOrd::partial_cmp(&__self_tag,
                                                                                                                                                                                                                                                                                                    &__arg1_tag)
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    #[automatically_derived]
                                                                                                                                                                                                                                                                                    impl ::core::clone::Clone for Hand {
                                                                                                                                                                                                                                                                                        #[inline]
                                                                                                                                                                                                                                                                                        fn clone<'_>(self: &'_ Self) -> Hand { *self }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    #[automatically_derived]
                                                                                                                                                                                                                                                                                    impl ::core::marker::Copy for Hand { }
                                                                                                                                                                                                                                                                                    impl FromStr for Hand {
                                                                                                                                                                                                                                                                                        type
                                                                                                                                                                                                                                                                                        Err
                                                                                                                                                                                                                                                                                        =
                                                                                                                                                                                                                                                                                        ();
                                                                                                                                                                                                                                                                                        fn from_str<'_>(input: &'_ str)
                                                                                                                                                                                                                                                                                            ->
                                                                                                                                                                                                                                                                                                Result<Hand,
                                                                                                                                                                                                                                                                                                Self::Err> {
                                                                                                                                                                                                                                                                                                match input {
                                                                                                                                                                                                                                                                                                        "A" | "X" => Ok(Hand::A),
                                                                                                                                                                                                                                                                                                        "B" | "Y" => Ok(Hand::B),
                                                                                                                                                                                                                                                                                                        "C" | "Z" => Ok(Hand::C),
                                                                                                                                                                                                                                                                                                        _ => Err(()),
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    enum GameResult { X = 0, Y = 3, Z = 6, }
                                                                                                                                                                                                                                                                                    impl GameResult {
                                                                                                                                                                                                                                                                                        fn from_hands(player: Hand, enemy: Hand)
                                                                                                                                                                                                                                                                                            ->
                                                                                                                                                                                                                                                                                                GameResult {
                                                                                                                                                                                                                                                                                                if loses(player) == enemy { return GameResult::Z; }
                                                                                                                                                                                                                                                                                                        if player == enemy { return GameResult::Y; } GameResult::X }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    impl FromStr for GameResult {
                                                                                                                                                                                                                                                                                                        type
                                                                                                                                                                                                                                                                                                        Err
                                                                                                                                                                                                                                                                                                        =
                                                                                                                                                                                                                                                                                                        ();
                                                                                                                                                                                                                                                                                                        fn from_str<'_>(input: &'_ str)
                                                                                                                                                                                                                                                                                                            ->
                                                                                                                                                                                                                                                                                                                Result<GameResult,
                                                                                                                                                                                                                                                                                                                Self::Err> {
                                                                                                                                                                                                                                                                                                                match input {
                                                                                                                                                                                                                                                                                                                        "X" => Ok(GameResult::X),
                                                                                                                                                                                                                                                                                                                        "Y" => Ok(GameResult::Y),
                                                                                                                                                                                                                                                                                                                        "Z" => Ok(GameResult::Z),
                                                                                                                                                                                                                                                                                                                        _ => Err(()),
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    fn loses<'a>(move_hand: Hand)
                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                            Hand {
                                                                                                                                                                                                                                                                                                            return match move_hand {
                                                                                                                                                                                                                                                                                                                        Hand::A => Hand::C,
                                                                                                                                                                                                                                                                                                                        Hand::B => Hand::A,
                                                                                                                                                                                                                                                                                                                        Hand::C => Hand::B,
                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    fn beats<'a>(move_hand: Hand)
                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                            Hand {
                                                                                                                                                                                                                                                                                                            return match move_hand {
                                                                                                                                                                                                                                                                                                                        Hand::A => Hand::B,
                                                                                                                                                                                                                                                                                                                        Hand::B => Hand::C,
                                                                                                                                                                                                                                                                                                                        Hand::C => Hand::A,
                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    fn get_round_score_one(player_move: Hand, enemy_move: Hand)
                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                            usize {
                                                                                                                                                                                                                                                                                                            let expeted_game_score =
                                                                                                                                                                                                                                                                                                                GameResult::from_hands(player_move, enemy_move) as usize;
                                                                                                                                                                                                                                                                                                            let hand_score = player_move as usize;
                                                                                                                                                                                                                                                                                                            expeted_game_score + hand_score
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    fn get_round_score_two(player_result: GameResult,
                                                                                                                                                                                                                                                                                                        enemy_move: Hand)
                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                            usize {
                                                                                                                                                                                                                                                                                                            let hand_score =
                                                                                                                                                                                                                                                                                                                match player_result {
                                                                                                                                                                                                                                                                                                                            GameResult::X => loses(enemy_move),
                                                                                                                                                                                                                                                                                                                            GameResult::Y => enemy_move,
                                                                                                                                                                                                                                                                                                                            GameResult::Z => beats(enemy_move),
                                                                                                                                                                                                                                                                                                                        } as usize;
                                                                                                                                                                                                                                                                                                            let expeted_game_score = player_result as usize;
                                                                                                                                                                                                                                                                                                            expeted_game_score + hand_score
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    fn solution<'_>(input: Vec<&'_ str>)
                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                            (usize,
                                                                                                                                                                                                                                                                                                            usize) {
                                                                                                                                                                                                                                                                                                            let mut score_one = 0usize;
                                                                                                                                                                                                                                                                                                            let mut score_two = 0usize;
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                    let _t =
                                                                                                                                                                                                                                                                                                                        match #[lang = "into_iter"](input) {
                                                                                                                                                                                                                                                                                                                                mut iter =>
                                                                                                                                                                                                                                                                                                                                    loop {
                                                                                                                                                                                                                                                                                                                                            match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                    #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                    #[lang = "Some"] {  0: play } => {
                                                                                                                                                                                                                                                                                                                                                        let round: Vec<&str> = play.split(" ").collect();
                                                                                                                                                                                                                                                                                                                                                        score_one +=
                                                                                                                                                                                                                                                                                                                                                            get_round_score_one(Hand::from_str(round[1]).unwrap(),
                                                                                                                                                                                                                                                                                                                                                                Hand::from_str(round[0]).unwrap());
                                                                                                                                                                                                                                                                                                                                                        score_two +=
                                                                                                                                                                                                                                                                                                                                                            get_round_score_two(GameResult::from_str(round[1]).unwrap(),
                                                                                                                                                                                                                                                                                                                                                                Hand::from_str(round[0]).unwrap());
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                                                                                                    _t
                                                                                                                                                                                                                                                                                                                };
                                                                                                                                                                                                                                                                                                            (score_one, score_two)
                                                                                                                                                                                                                                                                                                        } }
                                                                                                                                                                                                                                                                                                mod day_3 {
                                                                                                                                                                                                                                                                                                    fn get_char_prio(ch: char)
                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                            usize {
                                                                                                                                                                                                                                                                                                            if 'a' <= ch && ch <= 'z'
                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                            ch as usize - 'a' as usize + 1
                                                                                                                                                                                                                                                                                                                        } else { ch as usize - 'A' as usize + 1 + 26 }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                            fn find_prios_of_same_letters<'_>(input: &'_ str)
                                                                                                                                                                                                                                                                                                                ->
                                                                                                                                                                                                                                                                                                                    usize {
                                                                                                                                                                                                                                                                                                                    let mut ans = 0usize;
                                                                                                                                                                                                                                                                                                                    let half = input.len() / 2;
                                                                                                                                                                                                                                                                                                                    let first = input.chars().take(half);
                                                                                                                                                                                                                                                                                                                    let second =
                                                                                                                                                                                                                                                                                                                        input.chars().rev().take(half).collect::<Vec<char>>();
                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                            let _t =
                                                                                                                                                                                                                                                                                                                                match #[lang = "into_iter"](first) {
                                                                                                                                                                                                                                                                                                                                        mut iter =>
                                                                                                                                                                                                                                                                                                                                            loop {
                                                                                                                                                                                                                                                                                                                                                    match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                            #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                            #[lang = "Some"] {  0: ch } => {
                                                                                                                                                                                                                                                                                                                                                                if second.iter().position(|&x| x == ch).is_some()
                                                                                                                                                                                                                                                                                                                                                                        { ans += get_char_prio(ch); break; }
                                                                                                                                                                                                                                                                                                                                                                    } }
                                                                                                                                                                                                                                                                                                                                                        }, }; _t };
                                                                                                                                                                                                                                                                                                                            ans
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                    fn find_prios_group_of_three<'_, '_>(group: &'_ [&'_ str])
                                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                                            usize {
                                                                                                                                                                                                                                                                                                                            let (first, second, third) =
                                                                                                                                                                                                                                                                                                                                (group[0].chars(), group[1].chars().collect::<Vec<char>>(),
                                                                                                                                                                                                                                                                                                                                    group[2].chars().collect::<Vec<char>>());
                                                                                                                                                                                                                                                                                                                            let mut ans = 0usize;
                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                    let _t =
                                                                                                                                                                                                                                                                                                                                        match #[lang = "into_iter"](first) {
                                                                                                                                                                                                                                                                                                                                                mut iter =>
                                                                                                                                                                                                                                                                                                                                                    loop {
                                                                                                                                                                                                                                                                                                                                                            match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                    #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                    #[lang = "Some"] {  0: ch } => {
                                                                                                                                                                                                                                                                                                                                                                        let is_in_second =
                                                                                                                                                                                                                                                                                                                                                                            second.iter().position(|&x| x == ch).is_some();
                                                                                                                                                                                                                                                                                                                                                                        let is_in_third =
                                                                                                                                                                                                                                                                                                                                                                            third.iter().position(|&x| x == ch).is_some();
                                                                                                                                                                                                                                                                                                                                                                        if is_in_second && is_in_third
                                                                                                                                                                                                                                                                                                                                                                                { ans += get_char_prio(ch); break; }
                                                                                                                                                                                                                                                                                                                                                                            } }
                                                                                                                                                                                                                                                                                                                                                                }, }; _t };
                                                                                                                                                                                                                                                                                                                                    ans
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                            fn solution<'_>(input: Vec<&'_ str>)
                                                                                                                                                                                                                                                                                                                                ->
                                                                                                                                                                                                                                                                                                                                    (usize,
                                                                                                                                                                                                                                                                                                                                    usize) {
                                                                                                                                                                                                                                                                                                                                    let mut ans_one = 0usize;
                                                                                                                                                                                                                                                                                                                                    let mut ans_two = 0usize;
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                            let _t =
                                                                                                                                                                                                                                                                                                                                                match #[lang = "into_iter"](&input) {
                                                                                                                                                                                                                                                                                                                                                        mut iter =>
                                                                                                                                                                                                                                                                                                                                                            loop {
                                                                                                                                                                                                                                                                                                                                                                    match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                            #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                            #[lang = "Some"] {  0: sack } => {
                                                                                                                                                                                                                                                                                                                                                                                ans_one += find_prios_of_same_letters(sack);
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                                                            _t
                                                                                                                                                                                                                                                                                                                                        };
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                            let _t =
                                                                                                                                                                                                                                                                                                                                                match #[lang = "into_iter"](input.chunks(3)) {
                                                                                                                                                                                                                                                                                                                                                        mut iter =>
                                                                                                                                                                                                                                                                                                                                                            loop {
                                                                                                                                                                                                                                                                                                                                                                    match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                            #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                            #[lang = "Some"] {  0: elf_group } => {
                                                                                                                                                                                                                                                                                                                                                                                ans_two += find_prios_group_of_three(elf_group);
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                },
                                                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                                                            _t
                                                                                                                                                                                                                                                                                                                                        };
                                                                                                                                                                                                                                                                                                                                    (ans_one, ans_two)
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        mod day_4 {
                                                                                                                                                                                                                                                                                                                            macro_rules! intersect_full {
                                                                                                                                                                                                                                                                                                                                ($start1 : expr, $end1 : expr, $start2 : expr, $end2 : expr)
                                                                                                                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                        ($start1 <= $start2 && $end1 >= $end2) ||
                                                                                                                                                                                                                                                                                                                                        ($start2 <= $start1 && $end2 >= $end1)
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                } ;
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            macro_rules! intersect_partial {
                                                                                                                                                                                                                                                                                                                                ($start1 : expr, $end1 : expr, $start2 : expr, $end2 : expr)
                                                                                                                                                                                                                                                                                                                                =>
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                        if($start2 <= $start1 && $start1 <= $end2) ||
                                                                                                                                                                                                                                                                                                                                        ($start2 <= $end1 && $end1 <= $end2) { true } else
                                                                                                                                                                                                                                                                                                                                        if($start1 <= $start2 && $start2 <= $end1) ||
                                                                                                                                                                                                                                                                                                                                        ($start1 <= $end2 && $end2 <= $end1) { true } else { false }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                } ;
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            fn solution<'_>(input: Vec<&'_ str>)
                                                                                                                                                                                                                                                                                                                                ->
                                                                                                                                                                                                                                                                                                                                    (usize,
                                                                                                                                                                                                                                                                                                                                    usize) {
                                                                                                                                                                                                                                                                                                                                    let mut ans_one = 0usize;
                                                                                                                                                                                                                                                                                                                                    let mut ans_two = 0usize;
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                            let _t =
                                                                                                                                                                                                                                                                                                                                                match #[lang = "into_iter"](input) {
                                                                                                                                                                                                                                                                                                                                                        mut iter =>
                                                                                                                                                                                                                                                                                                                                                            loop {
                                                                                                                                                                                                                                                                                                                                                                    match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                            #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                            #[lang = "Some"] {  0: group } => {
                                                                                                                                                                                                                                                                                                                                                                                let split_group: Vec<&str> = group.split(",").collect();
                                                                                                                                                                                                                                                                                                                                                                                let r1: Vec<usize> =
                                                                                                                                                                                                                                                                                                                                                                                    split_group[0].split("-").map(|x|
                                                                                                                                                                                                                                                                                                                                                                                                x.parse::<usize>().unwrap()).collect();
                                                                                                                                                                                                                                                                                                                                                                                let r2: Vec<usize> =
                                                                                                                                                                                                                                                                                                                                                                                    split_group[1].split("-").map(|x|
                                                                                                                                                                                                                                                                                                                                                                                                x.parse::<usize>().unwrap()).collect();
                                                                                                                                                                                                                                                                                                                                                                                if {
                                                                                                                                                                                                                                                                                                                                                                                                if r2[0] <= r1[0] && r1[0] <= r2[1] ||
                                                                                                                                                                                                                                                                                                                                                                                                            r2[0] <= r1[1] && r1[1] <= r2[1]
                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                true
                                                                                                                                                                                                                                                                                                                                                                                                            } else if r1[0] <= r2[0] && r2[0] <= r1[1] ||
                                                                                                                                                                                                                                                                                                                                                                                                               r1[0] <= r2[1] && r2[1] <= r1[1] { true } else { false }
                                                                                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                                                                                        { ans_two += 1; }
                                                                                                                                                                                                                                                                                                                                                                                                    if {
                                                                                                                                                                                                                                                                                                                                                                                                                    r1[0] <= r2[0] && r1[1] >= r2[1] ||
                                                                                                                                                                                                                                                                                                                                                                                                                        r2[0] <= r1[0] && r2[1] >= r1[1]
                                                                                                                                                                                                                                                                                                                                                                                                                } { ans_one += 1; }
                                                                                                                                                                                                                                                                                                                                                                                                        } }
                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                                                                                            _t
                                                                                                                                                                                                                                                                                                                                                                        };
                                                                                                                                                                                                                                                                                                                                                                    (ans_one, ans_two)
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        mod day_6 {
                                                                                                                                                                                                                                                                                                                                                            use std::time::Instant;
                                                                                                                                                                                                                                                                                                                                                            fn solve<'_>(input: &'_ String, packet_size: usize)
                                                                                                                                                                                                                                                                                                                                                                ->
                                                                                                                                                                                                                                                                                                                                                                    usize {
                                                                                                                                                                                                                                                                                                                                                                    let now: Instant = Instant::now();
                                                                                                                                                                                                                                                                                                                                                                    let bytes = input.as_bytes();
                                                                                                                                                                                                                                                                                                                                                                    let mut ans = 0usize;
                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                            let _t =
                                                                                                                                                                                                                                                                                                                                                                                match #[lang = "into_iter"](#[lang = "Range"]{
                                                                                                                                                                                                                                                                                                                                                                                                    start: 0,

                                                                                                                                                                                                                                                                                                                                                                                                    end: bytes.len(),}) {
                                                                                                                                                                                                                                                                                                                                                                                        mut iter =>
                                                                                                                                                                                                                                                                                                                                                                                            loop {
                                                                                                                                                                                                                                                                                                                                                                                                    match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                                                            #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                                                            #[lang = "Some"] {  0: i } => {
                                                                                                                                                                                                                                                                                                                                                                                                                let seq =
                                                                                                                                                                                                                                                                                                                                                                                                                    bytes[#[lang = "Range"]{
                                                                                                                                                                                                                                                                                                                                                                                                                                    start: i,

                                                                                                                                                                                                                                                                                                                                                                                                                                    end:
                                                                                                                                                                                                                                                                                                                                                                                                                                        i +
                                                                                                                                                                                                                                                                                                                                                                                                                                            packet_size,}].iter().fold(0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                        |acc, x|
                                                                                                                                                                                                                                                                                                                                                                                                                            { let place = x - 'a' as u8; acc ^ 1u32 << place });
                                                                                                                                                                                                                                                                                                                                                                                                                if seq.count_ones() == packet_size as u32
                                                                                                                                                                                                                                                                                                                                                                                                                        { ans = i + packet_size; break; }
                                                                                                                                                                                                                                                                                                                                                                                                                    } }
                                                                                                                                                                                                                                                                                                                                                                                                        }, }; _t };
                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                    ::std::io::_print(<#[lang = "format_arguments"]>::new_v1_formatted(&["[",
                                                                                                                                                                                                                                                                                                                                                                                                        "] ver1 for packet_size: [", "] | time: [", "]\n"],
                                                                                                                                                                                                                                                                                                                                                                                            &match (&now.elapsed(), &ans, &packet_size) {
                                                                                                                                                                                                                                                                                                                                                                                                        args =>
                                                                                                                                                                                                                                                                                                                                                                                                            [<#[lang = "format_argument"]>::new_display(args.1),
                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_argument"]>::new_display(args.2),
                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_argument"]>::new_debug(args.0)],
                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                            &[<#[lang = "format_placeholder"]>::new(0usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_alignment"]>::Unknown, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied),
                                                                                                                                                                                                                                                                                                                                                                                                        <#[lang = "format_placeholder"]>::new(1usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_alignment"]>::Right, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Is(2usize)),
                                                                                                                                                                                                                                                                                                                                                                                                        <#[lang = "format_placeholder"]>::new(2usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_alignment"]>::Right, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Is(12usize))],
                                                                                                                                                                                                                                                                                                                                                                                            unsafe { <#[lang = "format_unsafe_arg"]>::new() }));
                                                                                                                                                                                                                                                                                                                                                                                };
                                                                                                                                                                                                                                                                                                                                                                            ans
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                    fn solve_version_two<'_>(input: &'_ String,
                                                                                                                                                                                                                                                                                                                                                                        packet_size: usize)
                                                                                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                                                                                            usize {
                                                                                                                                                                                                                                                                                                                                                                            let now = Instant::now();
                                                                                                                                                                                                                                                                                                                                                                            let bytes = input.as_bytes();
                                                                                                                                                                                                                                                                                                                                                                            let mut ans = 0usize;
                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                    let _t =
                                                                                                                                                                                                                                                                                                                                                                                        match #[lang = "into_iter"](bytes.windows(packet_size as
                                                                                                                                                                                                                                                                                                                                                                                                                    usize).enumerate()) {
                                                                                                                                                                                                                                                                                                                                                                                                mut iter =>
                                                                                                                                                                                                                                                                                                                                                                                                    loop {
                                                                                                                                                                                                                                                                                                                                                                                                            match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                                                                    #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                                                                    #[lang = "Some"] {  0: (idx, window) } => {
                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                let _t =
                                                                                                                                                                                                                                                                                                                                                                                                                                    match #[lang = "into_iter"](window) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            mut iter =>
                                                                                                                                                                                                                                                                                                                                                                                                                                                loop {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                #[lang = "Some"] {  0: w } => {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let place = w - 'a' as u8;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let num = 1usize << place;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if ans & num == num { break; } ans = ans ^ num; } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }, }; _t };
                                                                                                                                                                                                                                                                                                                                                                                                                                if ans.count_ones() == packet_size as u32
                                                                                                                                                                                                                                                                                                                                                                                                                                        { ans = idx + packet_size; break; }
                                                                                                                                                                                                                                                                                                                                                                                                                                        ans = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                    } } }, };
                                                                                                                                                                                                                                                                                                                                                                                                    _t
                                                                                                                                                                                                                                                                                                                                                                                                };
                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                    ::std::io::_print(<#[lang = "format_arguments"]>::new_v1_formatted(&["[",
                                                                                                                                                                                                                                                                                                                                                                                                                        "] ver2 for packet_size: [", "] | time: [", "]\n"],
                                                                                                                                                                                                                                                                                                                                                                                                            &match (&now.elapsed(), &ans, &packet_size) {
                                                                                                                                                                                                                                                                                                                                                                                                                        args =>
                                                                                                                                                                                                                                                                                                                                                                                                                            [<#[lang = "format_argument"]>::new_display(args.1),
                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_argument"]>::new_display(args.2),
                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_argument"]>::new_debug(args.0)],
                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                            &[<#[lang = "format_placeholder"]>::new(0usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_alignment"]>::Unknown, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied),
                                                                                                                                                                                                                                                                                                                                                                                                                        <#[lang = "format_placeholder"]>::new(1usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_alignment"]>::Right, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Is(2usize)),
                                                                                                                                                                                                                                                                                                                                                                                                                        <#[lang = "format_placeholder"]>::new(2usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_alignment"]>::Right, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Is(12usize))],
                                                                                                                                                                                                                                                                                                                                                                                                            unsafe { <#[lang = "format_unsafe_arg"]>::new() }));
                                                                                                                                                                                                                                                                                                                                                                                                }; ans }
                                                                                                                                                                                                                                                                                                                                                                                    fn solve_version_three<'_>(input: &'_ String,
                                                                                                                                                                                                                                                                                                                                                                                        packet_size: usize)
                                                                                                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                                                                                                            usize {
                                                                                                                                                                                                                                                                                                                                                                                            let now = Instant::now();
                                                                                                                                                                                                                                                                                                                                                                                            let bytes = input.as_bytes();
                                                                                                                                                                                                                                                                                                                                                                                            let ans =
                                                                                                                                                                                                                                                                                                                                                                                                bytes.windows(packet_size).position(|s|
                                                                                                                                                                                                                                                                                                                                                                                                                !#[lang = "Range"]{
                                                                                                                                                                                                                                                                                                                                                                                                                            start: 1,

                                                                                                                                                                                                                                                                                                                                                                                                                            end:
                                                                                                                                                                                                                                                                                                                                                                                                                                s.len(),}.any(|i|
                                                                                                                                                                                                                                                                                                                                                                                                                            s[#[lang = "RangeFrom"]{
                                                                                                                                                                                                                                                                                                                                                                                                                                        start: i,}].contains(&s[i - 1]))).unwrap() + packet_size;
                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                    ::std::io::_print(<#[lang = "format_arguments"]>::new_v1_formatted(&["[",
                                                                                                                                                                                                                                                                                                                                                                                                                        "] ver3 for packet_size: [", "] | time: [", "]\n"],
                                                                                                                                                                                                                                                                                                                                                                                                            &match (&now.elapsed(), &ans, &packet_size) {
                                                                                                                                                                                                                                                                                                                                                                                                                        args =>
                                                                                                                                                                                                                                                                                                                                                                                                                            [<#[lang = "format_argument"]>::new_display(args.1),
                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_argument"]>::new_display(args.2),
                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_argument"]>::new_debug(args.0)],
                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                            &[<#[lang = "format_placeholder"]>::new(0usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_alignment"]>::Unknown, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied),
                                                                                                                                                                                                                                                                                                                                                                                                                        <#[lang = "format_placeholder"]>::new(1usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_alignment"]>::Right, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Is(2usize)),
                                                                                                                                                                                                                                                                                                                                                                                                                        <#[lang = "format_placeholder"]>::new(2usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_alignment"]>::Right, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Is(12usize))],
                                                                                                                                                                                                                                                                                                                                                                                                            unsafe { <#[lang = "format_unsafe_arg"]>::new() }));
                                                                                                                                                                                                                                                                                                                                                                                                };
                                                                                                                                                                                                                                                                                                                                                                                            ans
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                    fn solve_version_four<'_>(input: &'_ String,
                                                                                                                                                                                                                                                                                                                                                                                        packet_size: usize)
                                                                                                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                                                                                                            usize {
                                                                                                                                                                                                                                                                                                                                                                                            let now = Instant::now();
                                                                                                                                                                                                                                                                                                                                                                                            let bytes = input.as_bytes();
                                                                                                                                                                                                                                                                                                                                                                                            let mut ans = 0usize;
                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                    let _t =
                                                                                                                                                                                                                                                                                                                                                                                                        match #[lang = "into_iter"](#[lang = "Range"]{
                                                                                                                                                                                                                                                                                                                                                                                                                            start: 0,

                                                                                                                                                                                                                                                                                                                                                                                                                            end: bytes.len(),}) {
                                                                                                                                                                                                                                                                                                                                                                                                                mut iter =>
                                                                                                                                                                                                                                                                                                                                                                                                                    loop {
                                                                                                                                                                                                                                                                                                                                                                                                                            match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                                                                                    #[lang = "Some"] {  0: i } => {
                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut curr = 0u32;
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                let _t =
                                                                                                                                                                                                                                                                                                                                                                                                                                                    match #[lang = "into_iter"](bytes[#[lang = "Range"]{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                start: i,

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                end: i + packet_size,}].iter()) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            mut iter =>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                loop {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #[lang = "Some"] {  0: ch } => {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let place = ch - 'a' as u8;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let num = 1u32 << place;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if curr & num == num { break; } curr = curr ^ num; } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }, }; _t };
                                                                                                                                                                                                                                                                                                                                                                                                                                                if curr.count_ones() == packet_size as u32
                                                                                                                                                                                                                                                                                                                                                                                                                                                        { ans = i + packet_size; break; }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    } } }, };
                                                                                                                                                                                                                                                                                                                                                                                                                    _t
                                                                                                                                                                                                                                                                                                                                                                                                                };
                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                    ::std::io::_print(<#[lang = "format_arguments"]>::new_v1_formatted(&["[",
                                                                                                                                                                                                                                                                                                                                                                                                                                        "] ver4 for packet_size: [", "] | time: [", "]\n"],
                                                                                                                                                                                                                                                                                                                                                                                                                            &match (&now.elapsed(), &ans, &packet_size) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        args =>
                                                                                                                                                                                                                                                                                                                                                                                                                                            [<#[lang = "format_argument"]>::new_display(args.1),
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_argument"]>::new_display(args.2),
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_argument"]>::new_debug(args.0)],
                                                                                                                                                                                                                                                                                                                                                                                                                                    },
                                                                                                                                                                                                                                                                                                                                                                                                                            &[<#[lang = "format_placeholder"]>::new(0usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_alignment"]>::Unknown, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied),
                                                                                                                                                                                                                                                                                                                                                                                                                                        <#[lang = "format_placeholder"]>::new(1usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_alignment"]>::Right, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Is(2usize)),
                                                                                                                                                                                                                                                                                                                                                                                                                                        <#[lang = "format_placeholder"]>::new(2usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_alignment"]>::Right, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_count"]>::Is(12usize))],
                                                                                                                                                                                                                                                                                                                                                                                                                            unsafe { <#[lang = "format_unsafe_arg"]>::new() }));
                                                                                                                                                                                                                                                                                                                                                                                                                }; ans }
                                                                                                                                                                                                                                                                                                                                                                                                    fn solve_version_five<'_>(i: &'_ String, packet_size: usize)
                                                                                                                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                                                                                                                            usize {
                                                                                                                                                                                                                                                                                                                                                                                                            let now = Instant::now();
                                                                                                                                                                                                                                                                                                                                                                                                            let ans =
                                                                                                                                                                                                                                                                                                                                                                                                                i.as_bytes().windows(14).position(|w|
                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut vec = Vec::with_capacity(packet_size);
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                let _t =
                                                                                                                                                                                                                                                                                                                                                                                                                                                    match #[lang = "into_iter"](w) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            mut iter =>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                loop {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #[lang = "Some"] {  0: x } => {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if vec.contains(x) { return false; } vec.push(*x); } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }, }; _t };
                                                                                                                                                                                                                                                                                                                                                                                                                                                return true;
                                                                                                                                                                                                                                                                                                                                                                                                                                            }).map(|x| x + packet_size).unwrap();
                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                            ::std::io::_print(<#[lang = "format_arguments"]>::new_v1_formatted(&["[",
                                                                                                                                                                                                                                                                                                                                                                                                                                                "] ver5 for packet_size: [", "] | time: [", "]\n"],
                                                                                                                                                                                                                                                                                                                                                                                                                                    &match (&now.elapsed(), &ans, &packet_size) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                args =>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    [<#[lang = "format_argument"]>::new_display(args.1),
                                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_argument"]>::new_display(args.2),
                                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_argument"]>::new_debug(args.0)],
                                                                                                                                                                                                                                                                                                                                                                                                                                            },
                                                                                                                                                                                                                                                                                                                                                                                                                                    &[<#[lang = "format_placeholder"]>::new(0usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_alignment"]>::Unknown, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_count"]>::Implied),
                                                                                                                                                                                                                                                                                                                                                                                                                                                <#[lang = "format_placeholder"]>::new(1usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_alignment"]>::Right, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_count"]>::Is(2usize)),
                                                                                                                                                                                                                                                                                                                                                                                                                                                <#[lang = "format_placeholder"]>::new(2usize, ' ',
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_alignment"]>::Right, 0u32,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_count"]>::Implied,
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <#[lang = "format_count"]>::Is(12usize))],
                                                                                                                                                                                                                                                                                                                                                                                                                                    unsafe { <#[lang = "format_unsafe_arg"]>::new() }));
                                                                                                                                                                                                                                                                                                                                                                                                                        }; ans }
                                                                                                                                                                                                                                                                                                                                                                                                            fn solution(input: String)
                                                                                                                                                                                                                                                                                                                                                                                                                ->
                                                                                                                                                                                                                                                                                                                                                                                                                    (usize,
                                                                                                                                                                                                                                                                                                                                                                                                                    usize) {
                                                                                                                                                                                                                                                                                                                                                                                                                    solve(&input, 4);
                                                                                                                                                                                                                                                                                                                                                                                                                    solve_version_two(&input, 4);
                                                                                                                                                                                                                                                                                                                                                                                                                    solve_version_three(&input, 4);
                                                                                                                                                                                                                                                                                                                                                                                                                    solve_version_four(&input, 4);
                                                                                                                                                                                                                                                                                                                                                                                                                    solve_version_five(&input, 4);
                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                            ::std::io::_print(<#[lang = "format_arguments"]>::new_const(&["\n"]));
                                                                                                                                                                                                                                                                                                                                                                                                                        };
                                                                                                                                                                                                                                                                                                                                                                                                                    solve(&input, 14);
                                                                                                                                                                                                                                                                                                                                                                                                                    solve_version_two(&input, 14);
                                                                                                                                                                                                                                                                                                                                                                                                                    solve_version_three(&input, 14);
                                                                                                                                                                                                                                                                                                                                                                                                                    solve_version_four(&input, 14);
                                                                                                                                                                                                                                                                                                                                                                                                                    solve_version_five(&input, 14);
                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                            ::std::io::_print(<#[lang = "format_arguments"]>::new_const(&["\n"]));
                                                                                                                                                                                                                                                                                                                                                                                                                        };
                                                                                                                                                                                                                                                                                                                                                                                                                    (solve_version_four(&input, 4),
                                                                                                                                                                                                                                                                                                                                                                                                                        solve_version_four(&input, 14))
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                        mod day_9 {
                                                                                                                                                                                                                                                                                                                                                                                                            use std::collections::HashSet;
                                                                                                                                                                                                                                                                                                                                                                                                            fn advance_matrix_pos<'_>(pos: (isize, isize),
                                                                                                                                                                                                                                                                                                                                                                                                                direction: &'_ char)
                                                                                                                                                                                                                                                                                                                                                                                                                ->
                                                                                                                                                                                                                                                                                                                                                                                                                    (isize,
                                                                                                                                                                                                                                                                                                                                                                                                                    isize) {
                                                                                                                                                                                                                                                                                                                                                                                                                    let (x, y);
                                                                                                                                                                                                                                                                                                                                                                                                                    match direction {
                                                                                                                                                                                                                                                                                                                                                                                                                            'U' => { x = pos.0; y = pos.1 - 1; }
                                                                                                                                                                                                                                                                                                                                                                                                                            'R' => { x = pos.0 + 1; y = pos.1; }
                                                                                                                                                                                                                                                                                                                                                                                                                            'D' => { x = pos.0; y = pos.1 + 1; }
                                                                                                                                                                                                                                                                                                                                                                                                                            'L' => { x = pos.0 - 1; y = pos.1; }
                                                                                                                                                                                                                                                                                                                                                                                                                            _ => {
                                                                                                                                                                                                                                                                                                                                                                                                                                ::std::rt::begin_panic("Direction could only be U R D L");
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                        };
                                                                                                                                                                                                                                                                                                                                                                                                                    (x, y)
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                            enum MOVES { NoMove, Move, }
                                                                                                                                                                                                                                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                                                                                                                                                                                                                                            impl ::core::marker::StructuralPartialEq for MOVES { }
                                                                                                                                                                                                                                                                                                                                                                                                            #[automatically_derived]
                                                                                                                                                                                                                                                                                                                                                                                                            impl ::core::cmp::PartialEq for MOVES {
                                                                                                                                                                                                                                                                                                                                                                                                                #[inline]
                                                                                                                                                                                                                                                                                                                                                                                                                fn eq<'_, '_>(self: &'_ Self, other: &'_ MOVES)
                                                                                                                                                                                                                                                                                                                                                                                                                    ->
                                                                                                                                                                                                                                                                                                                                                                                                                        bool {
                                                                                                                                                                                                                                                                                                                                                                                                                        let __self_tag =
                                                                                                                                                                                                                                                                                                                                                                                                                            ::core::intrinsics::discriminant_value(self);
                                                                                                                                                                                                                                                                                                                                                                                                                        let __arg1_tag =
                                                                                                                                                                                                                                                                                                                                                                                                                            ::core::intrinsics::discriminant_value(other);
                                                                                                                                                                                                                                                                                                                                                                                                                        __self_tag == __arg1_tag
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                            fn should_move(head_pos: (isize, isize),
                                                                                                                                                                                                                                                                                                                                                                                                                tail_pos: (isize, isize))
                                                                                                                                                                                                                                                                                                                                                                                                                ->
                                                                                                                                                                                                                                                                                                                                                                                                                    MOVES {
                                                                                                                                                                                                                                                                                                                                                                                                                    let x_diff = head_pos.0.abs_diff(tail_pos.0);
                                                                                                                                                                                                                                                                                                                                                                                                                    let y_diff = head_pos.1.abs_diff(tail_pos.1);
                                                                                                                                                                                                                                                                                                                                                                                                                    if x_diff + y_diff > 2 || (x_diff > 1 || y_diff > 1)
                                                                                                                                                                                                                                                                                                                                                                                                                            { return MOVES::Move; }
                                                                                                                                                                                                                                                                                                                                                                                                                            MOVES::NoMove
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                    fn solution(input: String)
                                                                                                                                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                                                                                                                                            usize {
                                                                                                                                                                                                                                                                                                                                                                                                                            let mut hs: HashSet<(isize, isize)> = HashSet::new();
                                                                                                                                                                                                                                                                                                                                                                                                                            let base_pos = (11isize, 15isize);
                                                                                                                                                                                                                                                                                                                                                                                                                            let mut tails = [base_pos; 9];
                                                                                                                                                                                                                                                                                                                                                                                                                            let mut head_pos = base_pos;
                                                                                                                                                                                                                                                                                                                                                                                                                            hs.insert(base_pos);
                                                                                                                                                                                                                                                                                                                                                                                                                            let steps: Vec<(char, usize)> =
                                                                                                                                                                                                                                                                                                                                                                                                                                input.split('\n').map(|item|
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    (item.as_bytes()[0] as char,
                                                                                                                                                                                                                                                                                                                                                                                                                                                        (&item[#[lang = "RangeFrom"]{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            start: 2,}]).parse::<usize>().unwrap())
                                                                                                                                                                                                                                                                                                                                                                                                                                                }).collect();
                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                    let _t =
                                                                                                                                                                                                                                                                                                                                                                                                                                        match #[lang = "into_iter"](steps.iter()) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                mut iter =>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    loop {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #[lang = "Some"] {  0: &(direction, num_moves) } => {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let _t =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    match #[lang = "into_iter"](#[lang = "Range"]{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        start: 0,

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        end: num_moves,}) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            mut iter =>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                loop {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                #[lang = "Some"] {  0: _ } => {
let new_head_pos = advance_matrix_pos(head_pos, &direction);
head_pos = new_head_pos;
let mut new_tail_pos = new_head_pos;
{
let _t =
match #[lang = "into_iter"](tails.iter_mut()) {
mut iter =>
loop {
match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            #[lang = "None"] {} => break,
lang = "Some"] {  0: curr_tail_pos } => {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let move_type =
should_move(new_tail_pos, curr_tail_pos.clone());
match move_type {
oMove => { break; }
ove => {
if new_tail_pos.0 > curr_tail_pos.0
{ curr_tail_pos.0 += 1; }
if new_tail_pos.0 < curr_tail_pos.0
{ curr_tail_pos.0 -= 1; }
if new_tail_pos.1 > curr_tail_pos.1
{ curr_tail_pos.1 += 1; }
if new_tail_pos.1 < curr_tail_pos.1
{ curr_tail_pos.1 -= 1; }
} } new_tail_pos = curr_tail_pos.clone(); }
}
},
};
t
};
hs.insert(tails.last().unwrap().clone());
} }
},
};
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                _t
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        },
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            };
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    _t
                                                                                                                                                                                                                                                                                                                                                                                                                                                                };
                                                                                                                                                                                                                                                                                                                                                                                                                                                            hs.len()
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    #[allow(dead_code)]
                                                                                                                                                                                                                                                                                                                                                                                                                                                    fn solution_a(input: String)
                                                                                                                                                                                                                                                                                                                                                                                                                                                        ->
                                                                                                                                                                                                                                                                                                                                                                                                                                                            usize {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut hs: HashSet<(isize, isize)> = HashSet::new();
                                                                                                                                                                                                                                                                                                                                                                                                                                                            let (mut tail_x, mut tail_y) = (0isize, 0isize);
                                                                                                                                                                                                                                                                                                                                                                                                                                                            let (mut head_x, mut head_y) = (0isize, 0isize);
                                                                                                                                                                                                                                                                                                                                                                                                                                                            hs.insert((tail_x, tail_y));
                                                                                                                                                                                                                                                                                                                                                                                                                                                            let steps = input.split('\n');
                                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let _t =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        match #[lang = "into_iter"](steps) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                mut iter =>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    loop {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            match #[lang = "next"](&mut iter) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #[lang = "None"] {} => break,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    #[lang = "Some"] {  0: step } => {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let (direction, num_moves): (char, usize) =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            (step.as_bytes()[0] as char,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                (&step[#[lang = "RangeFrom"]{
start: 2,}]).parse::<usize>().unwrap());
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let _t =
match #[lang = "into_iter"](#[lang = "Range"]{
start: 0,

end: num_moves,}) {
mut iter =>
loop {
match #[lang = "next"](&mut iter) {
lang = "None"] {} => break,
lang = "Some"] {  0: _ } => {
let (new_head_x, new_head_y) =
advance_matrix_pos((head_x, head_y), &direction);
if new_head_x.abs_diff(tail_x) > 1 ||
new_head_y.abs_diff(tail_y) > 1
{
tail_x = head_x;
tail_y = head_y;
hs.insert((tail_x, tail_y));
}
head_x = new_head_x;
head_y = new_head_y;
} }
}, }; _t }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            } }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }, }; _t };
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    hs.len()
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        #[allow(dead_code)]
                                                                                                                                                                                                                                                                                                                                                                                                                                                        fn do_day_one() {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    fs::read_to_string("./src/1.in").expect("File is not there or unable to read");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents: Vec<&str> = contents.split("\n").collect();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let day_one_solution = day_1::solution(contents);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["Elf with max calories: [",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "] \nTop three elfs total: [", "]\n\n"],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                &[<#[lang = "format_argument"]>::new_display(&day_one_solution.max_calories),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_argument"]>::new_display(&day_one_solution.top_three_elfs)]));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        #[allow(dead_code)]
                                                                                                                                                                                                                                                                                                                                                                                                                                                        fn do_day_two() {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    fs::read_to_string("./src/2.in").expect("File is not there or unable to read");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents: Vec<&str> = contents.split("\n").collect();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let (day_two_solution_one, day_two_solution_two) =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    day_2::solution(contents);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["Play score first strat: [",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "]. \nPlayer score second strat: [", "]\n\n"],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                &[<#[lang = "format_argument"]>::new_display(&day_two_solution_one),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_argument"]>::new_display(&day_two_solution_two)]));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        #[allow(dead_code)]
                                                                                                                                                                                                                                                                                                                                                                                                                                                        fn do_day_three() {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    fs::read_to_string("./src/3.in").expect("File is not there or unable to read");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents: Vec<&str> = contents.split("\n").collect();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let (ans_one, ans_two) = day_3::solution(contents);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["Sum of prios: [",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "]. \nPrios of elf groups of 3: [", "]\n\n"],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                &[<#[lang = "format_argument"]>::new_display(&ans_one),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_argument"]>::new_display(&ans_two)]));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        #[allow(dead_code)]
                                                                                                                                                                                                                                                                                                                                                                                                                                                        fn do_day_four() {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    fs::read_to_string("./src/4.in").expect("File is not there or unable to read");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents: Vec<&str> = contents.split("\n").collect();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let (ans_one, ans_two) = day_4::solution(contents);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["Fully in range: [",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "]. \nFully or partially in range: [", "]\n\n"],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                &[<#[lang = "format_argument"]>::new_display(&ans_one),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_argument"]>::new_display(&ans_two)]));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        #[allow(dead_code)]
                                                                                                                                                                                                                                                                                                                                                                                                                                                        fn do_day_six() {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    fs::read_to_string("./src/6.in").expect("File is not there or unable to read");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let (ans_one, ans_two) = day_6::solution(contents);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["Message packet size [ 4]: [",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "]. \nMessage packet size [14]: [", "]\n"],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                &[<#[lang = "format_argument"]>::new_display(&ans_one),
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <#[lang = "format_argument"]>::new_display(&ans_two)]));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        #[allow(dead_code)]
                                                                                                                                                                                                                                                                                                                                                                                                                                                        fn do_day_nine() {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    fs::read_to_string("./src/9.in").expect("File is not there or unable to read");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let ans = day_9::solution(contents);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["Tail visited: [",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "] unique positions\n"],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                &[<#[lang = "format_argument"]>::new_display(&ans)]));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        #[allow(dead_code)]
                                                                                                                                                                                                                                                                                                                                                                                                                                                        fn do_day_ten() {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    fs::read_to_string("./src/10.in").expect("File is not there or unable to read");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let ans = day_10::solution(contents);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["\nSum of singal strenghts: [",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "]\n"],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                &[<#[lang = "format_argument"]>::new_display(&ans)]));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        fn do_day_eleven() {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    fs::read_to_string("./src/11.in").expect("File is not there or unable to read");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let ans = day_11::solution(contents);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["\n Monkey: [",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "]\n"],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                &[<#[lang = "format_argument"]>::new_display(&ans)]));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        fn do_day_twelve() {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    fs::read_to_string("./src/12.in").expect("File is not there or unable to read");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let ans = day_12::solution(contents);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["\n Shortest path: [",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "]\n"],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                &[<#[lang = "format_argument"]>::new_display(&ans)]));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        fn do_day_thirteen() {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let contents =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    fs::read_to_string("./src/13.test").expect("File is not there or unable to read");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let ans = day_13::solution(contents);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["\n Sum of correct packet indexes: [",
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            "]\n"],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                &[<#[lang = "format_argument"]>::new_display(&ans)]));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    };
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        fn main() {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut hm: HashMap<usize, fn() -> ()> = HashMap::new();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                hm.insert(1, do_day_one);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                hm.insert(2, do_day_two);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                hm.insert(3, do_day_three);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                hm.insert(4, do_day_four);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                hm.insert(6, do_day_six);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                hm.insert(9, do_day_nine);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                hm.insert(10, do_day_ten);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                hm.insert(11, do_day_eleven);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                hm.insert(12, do_day_twelve);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                hm.insert(13, do_day_thirteen);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                let args: Vec<String> = env::args().collect();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if args.len() < 2
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        { { ::std::rt::begin_panic("Not enough args"); }; }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let what = &args[1];
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if what == "all"
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let _t =
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    match #[lang = "into_iter"](hm.iter().sorted()) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            mut iter =>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                loop {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        match #[lang = "next"](&mut iter) {
lang = "None"] {} => break,
lang = "Some"] {  0: (&day_num, &f) } => {
{
std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["===DAY ",
n\n"],
lang = "format_argument"]>::new_display(&day_num)]));
};
f();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        };
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                _t
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   if let Some(elem) = hm.get(&what.parse::<usize>().unwrap())
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ::std::io::_print(<#[lang = "format_arguments"]>::new_v1(&["===DAY ",
n\n"],
lang = "format_argument"]>::new_display(&what)]));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       };
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   elem();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               } else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ::core::panicking::panic_fmt(<#[lang = "format_arguments"]>::new_v1(&["not implemented: Nothing for day $"],
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              &[<#[lang = "format_argument"]>::new_display(&what)]));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  };
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               }
